//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyFileItService.FileItMainService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItResponse", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItService.FileItMainService.FileItCabinet CabinetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItService.FileItMainService.FileItDocument[] DocumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> FileNameFileItIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItService.FileItMainService.FileItCabinet Cabinet {
            get {
                return this.CabinetField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetField, value) != true)) {
                    this.CabinetField = value;
                    this.RaisePropertyChanged("Cabinet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItService.FileItMainService.FileItDocument[] Documents {
            get {
                return this.DocumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentsField, value) != true)) {
                    this.DocumentsField = value;
                    this.RaisePropertyChanged("Documents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> FileNameFileItID {
            get {
                return this.FileNameFileItIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameFileItIDField, value) != true)) {
                    this.FileNameFileItIDField = value;
                    this.RaisePropertyChanged("FileNameFileItID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItCabinet", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItCabinet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CabinetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CabinetNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItService.FileItMainService.FileItTemplate TemplateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CabinetId {
            get {
                return this.CabinetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetIdField, value) != true)) {
                    this.CabinetIdField = value;
                    this.RaisePropertyChanged("CabinetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CabinetName {
            get {
                return this.CabinetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetNameField, value) != true)) {
                    this.CabinetNameField = value;
                    this.RaisePropertyChanged("CabinetName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItService.FileItMainService.FileItTemplate Template {
            get {
                return this.TemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateField, value) != true)) {
                    this.TemplateField = value;
                    this.RaisePropertyChanged("Template");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItDocument", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItDocument : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CabinetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageBase64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> IndexInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebImageBase64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebImageBase64SrcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebImageThumbBase64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebImageThumbBase64SrcField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CabinetID {
            get {
                return this.CabinetIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetIDField, value) != true)) {
                    this.CabinetIDField = value;
                    this.RaisePropertyChanged("CabinetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageBase64 {
            get {
                return this.ImageBase64Field;
            }
            set {
                if ((object.ReferenceEquals(this.ImageBase64Field, value) != true)) {
                    this.ImageBase64Field = value;
                    this.RaisePropertyChanged("ImageBase64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> IndexInformation {
            get {
                return this.IndexInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexInformationField, value) != true)) {
                    this.IndexInformationField = value;
                    this.RaisePropertyChanged("IndexInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebImageBase64 {
            get {
                return this.WebImageBase64Field;
            }
            set {
                if ((object.ReferenceEquals(this.WebImageBase64Field, value) != true)) {
                    this.WebImageBase64Field = value;
                    this.RaisePropertyChanged("WebImageBase64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebImageBase64Src {
            get {
                return this.WebImageBase64SrcField;
            }
            set {
                if ((object.ReferenceEquals(this.WebImageBase64SrcField, value) != true)) {
                    this.WebImageBase64SrcField = value;
                    this.RaisePropertyChanged("WebImageBase64Src");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebImageThumbBase64 {
            get {
                return this.WebImageThumbBase64Field;
            }
            set {
                if ((object.ReferenceEquals(this.WebImageThumbBase64Field, value) != true)) {
                    this.WebImageThumbBase64Field = value;
                    this.RaisePropertyChanged("WebImageThumbBase64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebImageThumbBase64Src {
            get {
                return this.WebImageThumbBase64SrcField;
            }
            set {
                if ((object.ReferenceEquals(this.WebImageThumbBase64SrcField, value) != true)) {
                    this.WebImageThumbBase64SrcField = value;
                    this.RaisePropertyChanged("WebImageThumbBase64Src");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItTemplate", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItTemplate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItService.FileItMainService.FileItTemplateDefinition[] TemplateDefinitionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemplateNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItService.FileItMainService.FileItTemplateDefinition[] TemplateDefinitions {
            get {
                return this.TemplateDefinitionsField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateDefinitionsField, value) != true)) {
                    this.TemplateDefinitionsField = value;
                    this.RaisePropertyChanged("TemplateDefinitions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TemplateName {
            get {
                return this.TemplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateNameField, value) != true)) {
                    this.TemplateNameField = value;
                    this.RaisePropertyChanged("TemplateName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItTemplateDefinition", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItTemplateDefinition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BARCODETYPEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DATATYPEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HIDECOLUMNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string INDEXNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short INDEXNUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> LINKEDFIELDIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LOOKUPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> MAXLENGTHField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MUSTENTERField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MUSTFILLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OCRACTIVEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SEARCHINDEXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TEMPLATENAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VIEWINDEXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> XCOORDINATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> YCOORDINATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> ZONEHEIGHTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> ZONEWIDTHField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BARCODETYPE {
            get {
                return this.BARCODETYPEField;
            }
            set {
                if ((object.ReferenceEquals(this.BARCODETYPEField, value) != true)) {
                    this.BARCODETYPEField = value;
                    this.RaisePropertyChanged("BARCODETYPE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DATATYPE {
            get {
                return this.DATATYPEField;
            }
            set {
                if ((object.ReferenceEquals(this.DATATYPEField, value) != true)) {
                    this.DATATYPEField = value;
                    this.RaisePropertyChanged("DATATYPE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HIDECOLUMN {
            get {
                return this.HIDECOLUMNField;
            }
            set {
                if ((object.ReferenceEquals(this.HIDECOLUMNField, value) != true)) {
                    this.HIDECOLUMNField = value;
                    this.RaisePropertyChanged("HIDECOLUMN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string INDEXNAME {
            get {
                return this.INDEXNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.INDEXNAMEField, value) != true)) {
                    this.INDEXNAMEField = value;
                    this.RaisePropertyChanged("INDEXNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short INDEXNUM {
            get {
                return this.INDEXNUMField;
            }
            set {
                if ((this.INDEXNUMField.Equals(value) != true)) {
                    this.INDEXNUMField = value;
                    this.RaisePropertyChanged("INDEXNUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> LINKEDFIELDID {
            get {
                return this.LINKEDFIELDIDField;
            }
            set {
                if ((this.LINKEDFIELDIDField.Equals(value) != true)) {
                    this.LINKEDFIELDIDField = value;
                    this.RaisePropertyChanged("LINKEDFIELDID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOOKUP {
            get {
                return this.LOOKUPField;
            }
            set {
                if ((object.ReferenceEquals(this.LOOKUPField, value) != true)) {
                    this.LOOKUPField = value;
                    this.RaisePropertyChanged("LOOKUP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> MAXLENGTH {
            get {
                return this.MAXLENGTHField;
            }
            set {
                if ((this.MAXLENGTHField.Equals(value) != true)) {
                    this.MAXLENGTHField = value;
                    this.RaisePropertyChanged("MAXLENGTH");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MUSTENTER {
            get {
                return this.MUSTENTERField;
            }
            set {
                if ((object.ReferenceEquals(this.MUSTENTERField, value) != true)) {
                    this.MUSTENTERField = value;
                    this.RaisePropertyChanged("MUSTENTER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MUSTFILL {
            get {
                return this.MUSTFILLField;
            }
            set {
                if ((object.ReferenceEquals(this.MUSTFILLField, value) != true)) {
                    this.MUSTFILLField = value;
                    this.RaisePropertyChanged("MUSTFILL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OCRACTIVE {
            get {
                return this.OCRACTIVEField;
            }
            set {
                if ((object.ReferenceEquals(this.OCRACTIVEField, value) != true)) {
                    this.OCRACTIVEField = value;
                    this.RaisePropertyChanged("OCRACTIVE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SEARCHINDEX {
            get {
                return this.SEARCHINDEXField;
            }
            set {
                if ((object.ReferenceEquals(this.SEARCHINDEXField, value) != true)) {
                    this.SEARCHINDEXField = value;
                    this.RaisePropertyChanged("SEARCHINDEX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TEMPLATENAME {
            get {
                return this.TEMPLATENAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.TEMPLATENAMEField, value) != true)) {
                    this.TEMPLATENAMEField = value;
                    this.RaisePropertyChanged("TEMPLATENAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VIEWINDEX {
            get {
                return this.VIEWINDEXField;
            }
            set {
                if ((object.ReferenceEquals(this.VIEWINDEXField, value) != true)) {
                    this.VIEWINDEXField = value;
                    this.RaisePropertyChanged("VIEWINDEX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> XCOORDINATE {
            get {
                return this.XCOORDINATEField;
            }
            set {
                if ((this.XCOORDINATEField.Equals(value) != true)) {
                    this.XCOORDINATEField = value;
                    this.RaisePropertyChanged("XCOORDINATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> YCOORDINATE {
            get {
                return this.YCOORDINATEField;
            }
            set {
                if ((this.YCOORDINATEField.Equals(value) != true)) {
                    this.YCOORDINATEField = value;
                    this.RaisePropertyChanged("YCOORDINATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ZONEHEIGHT {
            get {
                return this.ZONEHEIGHTField;
            }
            set {
                if ((this.ZONEHEIGHTField.Equals(value) != true)) {
                    this.ZONEHEIGHTField = value;
                    this.RaisePropertyChanged("ZONEHEIGHT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ZONEWIDTH {
            get {
                return this.ZONEWIDTHField;
            }
            set {
                if ((this.ZONEWIDTHField.Equals(value) != true)) {
                    this.ZONEWIDTHField = value;
                    this.RaisePropertyChanged("ZONEWIDTH");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItUser", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrintWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActiveUser {
            get {
                return this.ActiveUserField;
            }
            set {
                if ((this.ActiveUserField.Equals(value) != true)) {
                    this.ActiveUserField = value;
                    this.RaisePropertyChanged("ActiveUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pass {
            get {
                return this.PassField;
            }
            set {
                if ((object.ReferenceEquals(this.PassField, value) != true)) {
                    this.PassField = value;
                    this.RaisePropertyChanged("Pass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrintWidth {
            get {
                return this.PrintWidthField;
            }
            set {
                if ((this.PrintWidthField.Equals(value) != true)) {
                    this.PrintWidthField = value;
                    this.RaisePropertyChanged("PrintWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Profile {
            get {
                return this.ProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfileField, value) != true)) {
                    this.ProfileField = value;
                    this.RaisePropertyChanged("Profile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItDocumentLookup", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItDocumentLookup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IndexNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LookupValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IndexNumber {
            get {
                return this.IndexNumberField;
            }
            set {
                if ((this.IndexNumberField.Equals(value) != true)) {
                    this.IndexNumberField = value;
                    this.RaisePropertyChanged("IndexNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LookupValue {
            get {
                return this.LookupValueField;
            }
            set {
                if ((object.ReferenceEquals(this.LookupValueField, value) != true)) {
                    this.LookupValueField = value;
                    this.RaisePropertyChanged("LookupValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItDocumentIdLookup", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItDocumentIdLookup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CabinetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CabinetId {
            get {
                return this.CabinetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetIdField, value) != true)) {
                    this.CabinetIdField = value;
                    this.RaisePropertyChanged("CabinetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentId {
            get {
                return this.DocumentIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentIdField, value) != true)) {
                    this.DocumentIdField = value;
                    this.RaisePropertyChanged("DocumentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileItMainService.IFileItService")]
    public interface IFileItService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/InitService", ReplyAction="http://tempuri.org/IFileItService/InitServiceResponse")]
        bool InitService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/InitService", ReplyAction="http://tempuri.org/IFileItService/InitServiceResponse")]
        System.Threading.Tasks.Task<bool> InitServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/Authenticate", ReplyAction="http://tempuri.org/IFileItService/AuthenticateResponse")]
        MyFileItService.FileItMainService.FileItResponse Authenticate(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/Authenticate", ReplyAction="http://tempuri.org/IFileItService/AuthenticateResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> AuthenticateAsync(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/SetCabinetAccess", ReplyAction="http://tempuri.org/IFileItService/SetCabinetAccessResponse")]
        MyFileItService.FileItMainService.FileItResponse SetCabinetAccess(string user, string pass, string accesstype, string targetuser, string cabinetid, bool allowaccess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/SetCabinetAccess", ReplyAction="http://tempuri.org/IFileItService/SetCabinetAccessResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> SetCabinetAccessAsync(string user, string pass, string accesstype, string targetuser, string cabinetid, bool allowaccess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/AddUpdateUser", ReplyAction="http://tempuri.org/IFileItService/AddUpdateUserResponse")]
        MyFileItService.FileItMainService.FileItResponse AddUpdateUser(string user, string pass, MyFileItService.FileItMainService.FileItUser userobj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/AddUpdateUser", ReplyAction="http://tempuri.org/IFileItService/AddUpdateUserResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> AddUpdateUserAsync(string user, string pass, MyFileItService.FileItMainService.FileItUser userobj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/SetUserActive", ReplyAction="http://tempuri.org/IFileItService/SetUserActiveResponse")]
        MyFileItService.FileItMainService.FileItResponse SetUserActive(string user, string pass, string targetuser, bool active);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/SetUserActive", ReplyAction="http://tempuri.org/IFileItService/SetUserActiveResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> SetUserActiveAsync(string user, string pass, string targetuser, bool active);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/SetUserPassword", ReplyAction="http://tempuri.org/IFileItService/SetUserPasswordResponse")]
        MyFileItService.FileItMainService.FileItResponse SetUserPassword(string user, string pass, string targetuser, string newpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/SetUserPassword", ReplyAction="http://tempuri.org/IFileItService/SetUserPasswordResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> SetUserPasswordAsync(string user, string pass, string targetuser, string newpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/GetCabinets", ReplyAction="http://tempuri.org/IFileItService/GetCabinetsResponse")]
        System.Collections.Generic.Dictionary<string, string> GetCabinets(string user, string pass, string targetuser, bool allavailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/GetCabinets", ReplyAction="http://tempuri.org/IFileItService/GetCabinetsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetCabinetsAsync(string user, string pass, string targetuser, bool allavailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/GetCabinet", ReplyAction="http://tempuri.org/IFileItService/GetCabinetResponse")]
        MyFileItService.FileItMainService.FileItCabinet GetCabinet(string user, string pass, string cabinetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/GetCabinet", ReplyAction="http://tempuri.org/IFileItService/GetCabinetResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItCabinet> GetCabinetAsync(string user, string pass, string cabinetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/CreateCabinet", ReplyAction="http://tempuri.org/IFileItService/CreateCabinetResponse")]
        MyFileItService.FileItMainService.FileItResponse CreateCabinet(string user, string pass, MyFileItService.FileItMainService.FileItTemplate template, string cabinetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/CreateCabinet", ReplyAction="http://tempuri.org/IFileItService/CreateCabinetResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> CreateCabinetAsync(string user, string pass, MyFileItService.FileItMainService.FileItTemplate template, string cabinetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/DeleteDocument", ReplyAction="http://tempuri.org/IFileItService/DeleteDocumentResponse")]
        MyFileItService.FileItMainService.FileItResponse DeleteDocument(string user, string pass, string cabinetid, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/DeleteDocument", ReplyAction="http://tempuri.org/IFileItService/DeleteDocumentResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> DeleteDocumentAsync(string user, string pass, string cabinetid, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/GetDocuments", ReplyAction="http://tempuri.org/IFileItService/GetDocumentsResponse")]
        MyFileItService.FileItMainService.FileItResponse GetDocuments(string user, string pass, string cabinetid, MyFileItService.FileItMainService.FileItDocumentLookup[] lookups, bool includeThumbs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/GetDocuments", ReplyAction="http://tempuri.org/IFileItService/GetDocumentsResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> GetDocumentsAsync(string user, string pass, string cabinetid, MyFileItService.FileItMainService.FileItDocumentLookup[] lookups, bool includeThumbs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/GetDocumentsById", ReplyAction="http://tempuri.org/IFileItService/GetDocumentsByIdResponse")]
        MyFileItService.FileItMainService.FileItResponse GetDocumentsById(string user, string pass, MyFileItService.FileItMainService.FileItDocumentIdLookup[] documentIds, bool includeThumbs, bool includeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/GetDocumentsById", ReplyAction="http://tempuri.org/IFileItService/GetDocumentsByIdResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> GetDocumentsByIdAsync(string user, string pass, MyFileItService.FileItMainService.FileItDocumentIdLookup[] documentIds, bool includeThumbs, bool includeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/UploadDocuments", ReplyAction="http://tempuri.org/IFileItService/UploadDocumentsResponse")]
        MyFileItService.FileItMainService.FileItResponse UploadDocuments(string user, string pass, string cabinetId, MyFileItService.FileItMainService.FileItDocument[] documents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileItService/UploadDocuments", ReplyAction="http://tempuri.org/IFileItService/UploadDocumentsResponse")]
        System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> UploadDocumentsAsync(string user, string pass, string cabinetId, MyFileItService.FileItMainService.FileItDocument[] documents);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileItServiceChannel : MyFileItService.FileItMainService.IFileItService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileItServiceClient : System.ServiceModel.ClientBase<MyFileItService.FileItMainService.IFileItService>, MyFileItService.FileItMainService.IFileItService {
        
        public FileItServiceClient() {
        }
        
        public FileItServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileItServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileItServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileItServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InitService() {
            return base.Channel.InitService();
        }
        
        public System.Threading.Tasks.Task<bool> InitServiceAsync() {
            return base.Channel.InitServiceAsync();
        }
        
        public MyFileItService.FileItMainService.FileItResponse Authenticate(string user, string pass) {
            return base.Channel.Authenticate(user, pass);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> AuthenticateAsync(string user, string pass) {
            return base.Channel.AuthenticateAsync(user, pass);
        }
        
        public MyFileItService.FileItMainService.FileItResponse SetCabinetAccess(string user, string pass, string accesstype, string targetuser, string cabinetid, bool allowaccess) {
            return base.Channel.SetCabinetAccess(user, pass, accesstype, targetuser, cabinetid, allowaccess);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> SetCabinetAccessAsync(string user, string pass, string accesstype, string targetuser, string cabinetid, bool allowaccess) {
            return base.Channel.SetCabinetAccessAsync(user, pass, accesstype, targetuser, cabinetid, allowaccess);
        }
        
        public MyFileItService.FileItMainService.FileItResponse AddUpdateUser(string user, string pass, MyFileItService.FileItMainService.FileItUser userobj) {
            return base.Channel.AddUpdateUser(user, pass, userobj);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> AddUpdateUserAsync(string user, string pass, MyFileItService.FileItMainService.FileItUser userobj) {
            return base.Channel.AddUpdateUserAsync(user, pass, userobj);
        }
        
        public MyFileItService.FileItMainService.FileItResponse SetUserActive(string user, string pass, string targetuser, bool active) {
            return base.Channel.SetUserActive(user, pass, targetuser, active);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> SetUserActiveAsync(string user, string pass, string targetuser, bool active) {
            return base.Channel.SetUserActiveAsync(user, pass, targetuser, active);
        }
        
        public MyFileItService.FileItMainService.FileItResponse SetUserPassword(string user, string pass, string targetuser, string newpass) {
            return base.Channel.SetUserPassword(user, pass, targetuser, newpass);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> SetUserPasswordAsync(string user, string pass, string targetuser, string newpass) {
            return base.Channel.SetUserPasswordAsync(user, pass, targetuser, newpass);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetCabinets(string user, string pass, string targetuser, bool allavailable) {
            return base.Channel.GetCabinets(user, pass, targetuser, allavailable);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetCabinetsAsync(string user, string pass, string targetuser, bool allavailable) {
            return base.Channel.GetCabinetsAsync(user, pass, targetuser, allavailable);
        }
        
        public MyFileItService.FileItMainService.FileItCabinet GetCabinet(string user, string pass, string cabinetId) {
            return base.Channel.GetCabinet(user, pass, cabinetId);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItCabinet> GetCabinetAsync(string user, string pass, string cabinetId) {
            return base.Channel.GetCabinetAsync(user, pass, cabinetId);
        }
        
        public MyFileItService.FileItMainService.FileItResponse CreateCabinet(string user, string pass, MyFileItService.FileItMainService.FileItTemplate template, string cabinetName) {
            return base.Channel.CreateCabinet(user, pass, template, cabinetName);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> CreateCabinetAsync(string user, string pass, MyFileItService.FileItMainService.FileItTemplate template, string cabinetName) {
            return base.Channel.CreateCabinetAsync(user, pass, template, cabinetName);
        }
        
        public MyFileItService.FileItMainService.FileItResponse DeleteDocument(string user, string pass, string cabinetid, string documentId) {
            return base.Channel.DeleteDocument(user, pass, cabinetid, documentId);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> DeleteDocumentAsync(string user, string pass, string cabinetid, string documentId) {
            return base.Channel.DeleteDocumentAsync(user, pass, cabinetid, documentId);
        }
        
        public MyFileItService.FileItMainService.FileItResponse GetDocuments(string user, string pass, string cabinetid, MyFileItService.FileItMainService.FileItDocumentLookup[] lookups, bool includeThumbs) {
            return base.Channel.GetDocuments(user, pass, cabinetid, lookups, includeThumbs);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> GetDocumentsAsync(string user, string pass, string cabinetid, MyFileItService.FileItMainService.FileItDocumentLookup[] lookups, bool includeThumbs) {
            return base.Channel.GetDocumentsAsync(user, pass, cabinetid, lookups, includeThumbs);
        }
        
        public MyFileItService.FileItMainService.FileItResponse GetDocumentsById(string user, string pass, MyFileItService.FileItMainService.FileItDocumentIdLookup[] documentIds, bool includeThumbs, bool includeDeleted) {
            return base.Channel.GetDocumentsById(user, pass, documentIds, includeThumbs, includeDeleted);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> GetDocumentsByIdAsync(string user, string pass, MyFileItService.FileItMainService.FileItDocumentIdLookup[] documentIds, bool includeThumbs, bool includeDeleted) {
            return base.Channel.GetDocumentsByIdAsync(user, pass, documentIds, includeThumbs, includeDeleted);
        }
        
        public MyFileItService.FileItMainService.FileItResponse UploadDocuments(string user, string pass, string cabinetId, MyFileItService.FileItMainService.FileItDocument[] documents) {
            return base.Channel.UploadDocuments(user, pass, cabinetId, documents);
        }
        
        public System.Threading.Tasks.Task<MyFileItService.FileItMainService.FileItResponse> UploadDocumentsAsync(string user, string pass, string cabinetId, MyFileItService.FileItMainService.FileItDocument[] documents) {
            return base.Channel.UploadDocumentsAsync(user, pass, cabinetId, documents);
        }
    }
}
