//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyFileItTestSite.MyFileIt {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyFileItResult", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class MyFileItResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.AppUserDTO[] AppUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.CoachDTO[] CoachesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO[] DocumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.EmailLogDTO[] EmailLogsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> KeyValueDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.OrganizationDTO[] OrganizationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.PaymentHistoryDTO[] PaymentHistoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.SalesRepDTO[] SalesRepsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.ShareKeyDTO[] ShareKeysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.TeamEventDocumentDTO[] TeamEventDocumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO[] TeamEventPlayerRostersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.TeamEventDTO[] TeamEventsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.AppUserDTO[] AppUsers {
            get {
                return this.AppUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.AppUsersField, value) != true)) {
                    this.AppUsersField = value;
                    this.RaisePropertyChanged("AppUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.CoachDTO[] Coaches {
            get {
                return this.CoachesField;
            }
            set {
                if ((object.ReferenceEquals(this.CoachesField, value) != true)) {
                    this.CoachesField = value;
                    this.RaisePropertyChanged("Coaches");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO[] Documents {
            get {
                return this.DocumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentsField, value) != true)) {
                    this.DocumentsField = value;
                    this.RaisePropertyChanged("Documents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.EmailLogDTO[] EmailLogs {
            get {
                return this.EmailLogsField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailLogsField, value) != true)) {
                    this.EmailLogsField = value;
                    this.RaisePropertyChanged("EmailLogs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> KeyValueData {
            get {
                return this.KeyValueDataField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyValueDataField, value) != true)) {
                    this.KeyValueDataField = value;
                    this.RaisePropertyChanged("KeyValueData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.OrganizationDTO[] Organizations {
            get {
                return this.OrganizationsField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationsField, value) != true)) {
                    this.OrganizationsField = value;
                    this.RaisePropertyChanged("Organizations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.PaymentHistoryDTO[] PaymentHistories {
            get {
                return this.PaymentHistoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.PaymentHistoriesField, value) != true)) {
                    this.PaymentHistoriesField = value;
                    this.RaisePropertyChanged("PaymentHistories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.SalesRepDTO[] SalesReps {
            get {
                return this.SalesRepsField;
            }
            set {
                if ((object.ReferenceEquals(this.SalesRepsField, value) != true)) {
                    this.SalesRepsField = value;
                    this.RaisePropertyChanged("SalesReps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.ShareKeyDTO[] ShareKeys {
            get {
                return this.ShareKeysField;
            }
            set {
                if ((object.ReferenceEquals(this.ShareKeysField, value) != true)) {
                    this.ShareKeysField = value;
                    this.RaisePropertyChanged("ShareKeys");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.TeamEventDocumentDTO[] TeamEventDocuments {
            get {
                return this.TeamEventDocumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamEventDocumentsField, value) != true)) {
                    this.TeamEventDocumentsField = value;
                    this.RaisePropertyChanged("TeamEventDocuments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO[] TeamEventPlayerRosters {
            get {
                return this.TeamEventPlayerRostersField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamEventPlayerRostersField, value) != true)) {
                    this.TeamEventPlayerRostersField = value;
                    this.RaisePropertyChanged("TeamEventPlayerRosters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.TeamEventDTO[] TeamEvents {
            get {
                return this.TeamEventsField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamEventsField, value) != true)) {
                    this.TeamEventsField = value;
                    this.RaisePropertyChanged("TeamEvents");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppUserDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class AppUserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDRESS1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDRESS2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> APPUSERIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> APPUSERSTATUSIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> APPUSERTYPEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppUserStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BIRTHDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CABINETIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CITYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string COMMENTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.CoachDTO[] CoachesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATECREATEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMAILADDRESSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMAILADDRESS2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIRSTNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCoachField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LASTNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MOBILEPHONENUMBERField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfPurchasedShareKeysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.OrganizationDTO[] OrganizationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PASSWORDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PHONEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PRIMARYAPPUSERIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RELATIONSHIPTYPEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RelationShipTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RemindUserForSignUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SALESREPIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SEXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SHAREKEYEXPIREDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SHAREKEYIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string STATECODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.ShareKeyDTO[] ShareKeysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShowAdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string USERNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZIPCODEField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDRESS1 {
            get {
                return this.ADDRESS1Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDRESS1Field, value) != true)) {
                    this.ADDRESS1Field = value;
                    this.RaisePropertyChanged("ADDRESS1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDRESS2 {
            get {
                return this.ADDRESS2Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDRESS2Field, value) != true)) {
                    this.ADDRESS2Field = value;
                    this.RaisePropertyChanged("ADDRESS2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> APPUSERID {
            get {
                return this.APPUSERIDField;
            }
            set {
                if ((this.APPUSERIDField.Equals(value) != true)) {
                    this.APPUSERIDField = value;
                    this.RaisePropertyChanged("APPUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> APPUSERSTATUSID {
            get {
                return this.APPUSERSTATUSIDField;
            }
            set {
                if ((this.APPUSERSTATUSIDField.Equals(value) != true)) {
                    this.APPUSERSTATUSIDField = value;
                    this.RaisePropertyChanged("APPUSERSTATUSID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> APPUSERTYPEID {
            get {
                return this.APPUSERTYPEIDField;
            }
            set {
                if ((this.APPUSERTYPEIDField.Equals(value) != true)) {
                    this.APPUSERTYPEIDField = value;
                    this.RaisePropertyChanged("APPUSERTYPEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppUserStatus {
            get {
                return this.AppUserStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.AppUserStatusField, value) != true)) {
                    this.AppUserStatusField = value;
                    this.RaisePropertyChanged("AppUserStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> BIRTHDATE {
            get {
                return this.BIRTHDATEField;
            }
            set {
                if ((this.BIRTHDATEField.Equals(value) != true)) {
                    this.BIRTHDATEField = value;
                    this.RaisePropertyChanged("BIRTHDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CABINETID {
            get {
                return this.CABINETIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CABINETIDField, value) != true)) {
                    this.CABINETIDField = value;
                    this.RaisePropertyChanged("CABINETID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CITY {
            get {
                return this.CITYField;
            }
            set {
                if ((object.ReferenceEquals(this.CITYField, value) != true)) {
                    this.CITYField = value;
                    this.RaisePropertyChanged("CITY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMMENT {
            get {
                return this.COMMENTField;
            }
            set {
                if ((object.ReferenceEquals(this.COMMENTField, value) != true)) {
                    this.COMMENTField = value;
                    this.RaisePropertyChanged("COMMENT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.CoachDTO[] Coaches {
            get {
                return this.CoachesField;
            }
            set {
                if ((object.ReferenceEquals(this.CoachesField, value) != true)) {
                    this.CoachesField = value;
                    this.RaisePropertyChanged("Coaches");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATECREATED {
            get {
                return this.DATECREATEDField;
            }
            set {
                if ((this.DATECREATEDField.Equals(value) != true)) {
                    this.DATECREATEDField = value;
                    this.RaisePropertyChanged("DATECREATED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMAILADDRESS {
            get {
                return this.EMAILADDRESSField;
            }
            set {
                if ((object.ReferenceEquals(this.EMAILADDRESSField, value) != true)) {
                    this.EMAILADDRESSField = value;
                    this.RaisePropertyChanged("EMAILADDRESS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMAILADDRESS2 {
            get {
                return this.EMAILADDRESS2Field;
            }
            set {
                if ((object.ReferenceEquals(this.EMAILADDRESS2Field, value) != true)) {
                    this.EMAILADDRESS2Field = value;
                    this.RaisePropertyChanged("EMAILADDRESS2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIRSTNAME {
            get {
                return this.FIRSTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.FIRSTNAMEField, value) != true)) {
                    this.FIRSTNAMEField = value;
                    this.RaisePropertyChanged("FIRSTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCoach {
            get {
                return this.IsCoachField;
            }
            set {
                if ((this.IsCoachField.Equals(value) != true)) {
                    this.IsCoachField = value;
                    this.RaisePropertyChanged("IsCoach");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LASTNAME {
            get {
                return this.LASTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.LASTNAMEField, value) != true)) {
                    this.LASTNAMEField = value;
                    this.RaisePropertyChanged("LASTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MOBILEPHONENUMBER {
            get {
                return this.MOBILEPHONENUMBERField;
            }
            set {
                if ((object.ReferenceEquals(this.MOBILEPHONENUMBERField, value) != true)) {
                    this.MOBILEPHONENUMBERField = value;
                    this.RaisePropertyChanged("MOBILEPHONENUMBER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfPurchasedShareKeys {
            get {
                return this.NumberOfPurchasedShareKeysField;
            }
            set {
                if ((this.NumberOfPurchasedShareKeysField.Equals(value) != true)) {
                    this.NumberOfPurchasedShareKeysField = value;
                    this.RaisePropertyChanged("NumberOfPurchasedShareKeys");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.OrganizationDTO[] Organizations {
            get {
                return this.OrganizationsField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationsField, value) != true)) {
                    this.OrganizationsField = value;
                    this.RaisePropertyChanged("Organizations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PASSWORD {
            get {
                return this.PASSWORDField;
            }
            set {
                if ((object.ReferenceEquals(this.PASSWORDField, value) != true)) {
                    this.PASSWORDField = value;
                    this.RaisePropertyChanged("PASSWORD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PHONE {
            get {
                return this.PHONEField;
            }
            set {
                if ((object.ReferenceEquals(this.PHONEField, value) != true)) {
                    this.PHONEField = value;
                    this.RaisePropertyChanged("PHONE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PRIMARYAPPUSERID {
            get {
                return this.PRIMARYAPPUSERIDField;
            }
            set {
                if ((this.PRIMARYAPPUSERIDField.Equals(value) != true)) {
                    this.PRIMARYAPPUSERIDField = value;
                    this.RaisePropertyChanged("PRIMARYAPPUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RELATIONSHIPTYPEID {
            get {
                return this.RELATIONSHIPTYPEIDField;
            }
            set {
                if ((this.RELATIONSHIPTYPEIDField.Equals(value) != true)) {
                    this.RELATIONSHIPTYPEIDField = value;
                    this.RaisePropertyChanged("RELATIONSHIPTYPEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RelationShipType {
            get {
                return this.RelationShipTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationShipTypeField, value) != true)) {
                    this.RelationShipTypeField = value;
                    this.RaisePropertyChanged("RelationShipType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RemindUserForSignUp {
            get {
                return this.RemindUserForSignUpField;
            }
            set {
                if ((this.RemindUserForSignUpField.Equals(value) != true)) {
                    this.RemindUserForSignUpField = value;
                    this.RaisePropertyChanged("RemindUserForSignUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SALESREPID {
            get {
                return this.SALESREPIDField;
            }
            set {
                if ((this.SALESREPIDField.Equals(value) != true)) {
                    this.SALESREPIDField = value;
                    this.RaisePropertyChanged("SALESREPID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SEX {
            get {
                return this.SEXField;
            }
            set {
                if ((object.ReferenceEquals(this.SEXField, value) != true)) {
                    this.SEXField = value;
                    this.RaisePropertyChanged("SEX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SHAREKEYEXPIREDATE {
            get {
                return this.SHAREKEYEXPIREDATEField;
            }
            set {
                if ((this.SHAREKEYEXPIREDATEField.Equals(value) != true)) {
                    this.SHAREKEYEXPIREDATEField = value;
                    this.RaisePropertyChanged("SHAREKEYEXPIREDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SHAREKEYID {
            get {
                return this.SHAREKEYIDField;
            }
            set {
                if ((this.SHAREKEYIDField.Equals(value) != true)) {
                    this.SHAREKEYIDField = value;
                    this.RaisePropertyChanged("SHAREKEYID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string STATECODE {
            get {
                return this.STATECODEField;
            }
            set {
                if ((object.ReferenceEquals(this.STATECODEField, value) != true)) {
                    this.STATECODEField = value;
                    this.RaisePropertyChanged("STATECODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.ShareKeyDTO[] ShareKeys {
            get {
                return this.ShareKeysField;
            }
            set {
                if ((object.ReferenceEquals(this.ShareKeysField, value) != true)) {
                    this.ShareKeysField = value;
                    this.RaisePropertyChanged("ShareKeys");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowAds {
            get {
                return this.ShowAdsField;
            }
            set {
                if ((this.ShowAdsField.Equals(value) != true)) {
                    this.ShowAdsField = value;
                    this.RaisePropertyChanged("ShowAds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string USERNAME {
            get {
                return this.USERNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.USERNAMEField, value) != true)) {
                    this.USERNAMEField = value;
                    this.RaisePropertyChanged("USERNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZIPCODE {
            get {
                return this.ZIPCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.ZIPCODEField, value) != true)) {
                    this.ZIPCODEField = value;
                    this.RaisePropertyChanged("ZIPCODE");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CoachDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class CoachDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDRESS1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDRESS2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> APPUSERIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CITYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> COACHSTATUSIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATECREATEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMAILADDRESSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIRSTNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LASTNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ORGANIZATIONIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PHONEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RELATIONSHIPTYPEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SEXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SPORTTYPEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string STATECODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TEAMEVENTIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> YEARCODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZIPCODEField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDRESS1 {
            get {
                return this.ADDRESS1Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDRESS1Field, value) != true)) {
                    this.ADDRESS1Field = value;
                    this.RaisePropertyChanged("ADDRESS1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDRESS2 {
            get {
                return this.ADDRESS2Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDRESS2Field, value) != true)) {
                    this.ADDRESS2Field = value;
                    this.RaisePropertyChanged("ADDRESS2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> APPUSERID {
            get {
                return this.APPUSERIDField;
            }
            set {
                if ((this.APPUSERIDField.Equals(value) != true)) {
                    this.APPUSERIDField = value;
                    this.RaisePropertyChanged("APPUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CITY {
            get {
                return this.CITYField;
            }
            set {
                if ((object.ReferenceEquals(this.CITYField, value) != true)) {
                    this.CITYField = value;
                    this.RaisePropertyChanged("CITY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> COACHSTATUSID {
            get {
                return this.COACHSTATUSIDField;
            }
            set {
                if ((this.COACHSTATUSIDField.Equals(value) != true)) {
                    this.COACHSTATUSIDField = value;
                    this.RaisePropertyChanged("COACHSTATUSID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATECREATED {
            get {
                return this.DATECREATEDField;
            }
            set {
                if ((this.DATECREATEDField.Equals(value) != true)) {
                    this.DATECREATEDField = value;
                    this.RaisePropertyChanged("DATECREATED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMAILADDRESS {
            get {
                return this.EMAILADDRESSField;
            }
            set {
                if ((object.ReferenceEquals(this.EMAILADDRESSField, value) != true)) {
                    this.EMAILADDRESSField = value;
                    this.RaisePropertyChanged("EMAILADDRESS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIRSTNAME {
            get {
                return this.FIRSTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.FIRSTNAMEField, value) != true)) {
                    this.FIRSTNAMEField = value;
                    this.RaisePropertyChanged("FIRSTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LASTNAME {
            get {
                return this.LASTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.LASTNAMEField, value) != true)) {
                    this.LASTNAMEField = value;
                    this.RaisePropertyChanged("LASTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ORGANIZATIONID {
            get {
                return this.ORGANIZATIONIDField;
            }
            set {
                if ((this.ORGANIZATIONIDField.Equals(value) != true)) {
                    this.ORGANIZATIONIDField = value;
                    this.RaisePropertyChanged("ORGANIZATIONID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PHONE {
            get {
                return this.PHONEField;
            }
            set {
                if ((object.ReferenceEquals(this.PHONEField, value) != true)) {
                    this.PHONEField = value;
                    this.RaisePropertyChanged("PHONE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RELATIONSHIPTYPEID {
            get {
                return this.RELATIONSHIPTYPEIDField;
            }
            set {
                if ((this.RELATIONSHIPTYPEIDField.Equals(value) != true)) {
                    this.RELATIONSHIPTYPEIDField = value;
                    this.RaisePropertyChanged("RELATIONSHIPTYPEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SEX {
            get {
                return this.SEXField;
            }
            set {
                if ((object.ReferenceEquals(this.SEXField, value) != true)) {
                    this.SEXField = value;
                    this.RaisePropertyChanged("SEX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SPORTTYPEID {
            get {
                return this.SPORTTYPEIDField;
            }
            set {
                if ((this.SPORTTYPEIDField.Equals(value) != true)) {
                    this.SPORTTYPEIDField = value;
                    this.RaisePropertyChanged("SPORTTYPEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string STATECODE {
            get {
                return this.STATECODEField;
            }
            set {
                if ((object.ReferenceEquals(this.STATECODEField, value) != true)) {
                    this.STATECODEField = value;
                    this.RaisePropertyChanged("STATECODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TEAMEVENTID {
            get {
                return this.TEAMEVENTIDField;
            }
            set {
                if ((this.TEAMEVENTIDField.Equals(value) != true)) {
                    this.TEAMEVENTIDField = value;
                    this.RaisePropertyChanged("TEAMEVENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> YEARCODE {
            get {
                return this.YEARCODEField;
            }
            set {
                if ((this.YEARCODEField.Equals(value) != true)) {
                    this.YEARCODEField = value;
                    this.RaisePropertyChanged("YEARCODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZIPCODE {
            get {
                return this.ZIPCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.ZIPCODEField, value) != true)) {
                    this.ZIPCODEField = value;
                    this.RaisePropertyChanged("ZIPCODE");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileCabinetDocumentDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileCabinetDocumentDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> APPUSERIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Base64ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Base64ImageThumbField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CABINETIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string COMMENTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATECREATEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DOCUMENTDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DOCUMENTIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DOCUMENTLOCATIONField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DOCUMENTSTATUSIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DOCUMENTTYPEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIRSTNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LASTNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SCANDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TeamEventDocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> VerifiedAppUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VerifiedAppUserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> APPUSERID {
            get {
                return this.APPUSERIDField;
            }
            set {
                if ((this.APPUSERIDField.Equals(value) != true)) {
                    this.APPUSERIDField = value;
                    this.RaisePropertyChanged("APPUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Base64Image {
            get {
                return this.Base64ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.Base64ImageField, value) != true)) {
                    this.Base64ImageField = value;
                    this.RaisePropertyChanged("Base64Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Base64ImageThumb {
            get {
                return this.Base64ImageThumbField;
            }
            set {
                if ((object.ReferenceEquals(this.Base64ImageThumbField, value) != true)) {
                    this.Base64ImageThumbField = value;
                    this.RaisePropertyChanged("Base64ImageThumb");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CABINETID {
            get {
                return this.CABINETIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CABINETIDField, value) != true)) {
                    this.CABINETIDField = value;
                    this.RaisePropertyChanged("CABINETID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMMENT {
            get {
                return this.COMMENTField;
            }
            set {
                if ((object.ReferenceEquals(this.COMMENTField, value) != true)) {
                    this.COMMENTField = value;
                    this.RaisePropertyChanged("COMMENT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete {
            get {
                return this.CanDeleteField;
            }
            set {
                if ((this.CanDeleteField.Equals(value) != true)) {
                    this.CanDeleteField = value;
                    this.RaisePropertyChanged("CanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATECREATED {
            get {
                return this.DATECREATEDField;
            }
            set {
                if ((this.DATECREATEDField.Equals(value) != true)) {
                    this.DATECREATEDField = value;
                    this.RaisePropertyChanged("DATECREATED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DOCUMENTDATE {
            get {
                return this.DOCUMENTDATEField;
            }
            set {
                if ((this.DOCUMENTDATEField.Equals(value) != true)) {
                    this.DOCUMENTDATEField = value;
                    this.RaisePropertyChanged("DOCUMENTDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DOCUMENTID {
            get {
                return this.DOCUMENTIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DOCUMENTIDField, value) != true)) {
                    this.DOCUMENTIDField = value;
                    this.RaisePropertyChanged("DOCUMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DOCUMENTLOCATION {
            get {
                return this.DOCUMENTLOCATIONField;
            }
            set {
                if ((object.ReferenceEquals(this.DOCUMENTLOCATIONField, value) != true)) {
                    this.DOCUMENTLOCATIONField = value;
                    this.RaisePropertyChanged("DOCUMENTLOCATION");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DOCUMENTSTATUSID {
            get {
                return this.DOCUMENTSTATUSIDField;
            }
            set {
                if ((this.DOCUMENTSTATUSIDField.Equals(value) != true)) {
                    this.DOCUMENTSTATUSIDField = value;
                    this.RaisePropertyChanged("DOCUMENTSTATUSID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DOCUMENTTYPEID {
            get {
                return this.DOCUMENTTYPEIDField;
            }
            set {
                if ((this.DOCUMENTTYPEIDField.Equals(value) != true)) {
                    this.DOCUMENTTYPEIDField = value;
                    this.RaisePropertyChanged("DOCUMENTTYPEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentTypeName {
            get {
                return this.DocumentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentTypeNameField, value) != true)) {
                    this.DocumentTypeNameField = value;
                    this.RaisePropertyChanged("DocumentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIRSTNAME {
            get {
                return this.FIRSTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.FIRSTNAMEField, value) != true)) {
                    this.FIRSTNAMEField = value;
                    this.RaisePropertyChanged("FIRSTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LASTNAME {
            get {
                return this.LASTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.LASTNAMEField, value) != true)) {
                    this.LASTNAMEField = value;
                    this.RaisePropertyChanged("LASTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SCANDATE {
            get {
                return this.SCANDATEField;
            }
            set {
                if ((this.SCANDATEField.Equals(value) != true)) {
                    this.SCANDATEField = value;
                    this.RaisePropertyChanged("SCANDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TeamEventDocumentId {
            get {
                return this.TeamEventDocumentIdField;
            }
            set {
                if ((this.TeamEventDocumentIdField.Equals(value) != true)) {
                    this.TeamEventDocumentIdField = value;
                    this.RaisePropertyChanged("TeamEventDocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VerifiedAppUserId {
            get {
                return this.VerifiedAppUserIdField;
            }
            set {
                if ((this.VerifiedAppUserIdField.Equals(value) != true)) {
                    this.VerifiedAppUserIdField = value;
                    this.RaisePropertyChanged("VerifiedAppUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VerifiedAppUserName {
            get {
                return this.VerifiedAppUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VerifiedAppUserNameField, value) != true)) {
                    this.VerifiedAppUserNameField = value;
                    this.RaisePropertyChanged("VerifiedAppUserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailLogDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class EmailLogDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATECREATEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MESSAGEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SUBJECTLINEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TOEMAILADDRESSField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATECREATED {
            get {
                return this.DATECREATEDField;
            }
            set {
                if ((this.DATECREATEDField.Equals(value) != true)) {
                    this.DATECREATEDField = value;
                    this.RaisePropertyChanged("DATECREATED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MESSAGE {
            get {
                return this.MESSAGEField;
            }
            set {
                if ((object.ReferenceEquals(this.MESSAGEField, value) != true)) {
                    this.MESSAGEField = value;
                    this.RaisePropertyChanged("MESSAGE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SUBJECTLINE {
            get {
                return this.SUBJECTLINEField;
            }
            set {
                if ((object.ReferenceEquals(this.SUBJECTLINEField, value) != true)) {
                    this.SUBJECTLINEField = value;
                    this.RaisePropertyChanged("SUBJECTLINE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TOEMAILADDRESS {
            get {
                return this.TOEMAILADDRESSField;
            }
            set {
                if ((object.ReferenceEquals(this.TOEMAILADDRESSField, value) != true)) {
                    this.TOEMAILADDRESSField = value;
                    this.RaisePropertyChanged("TOEMAILADDRESS");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrganizationDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class OrganizationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDRESS1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDRESS2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ALLOWCOACHTOCREATEEVENTSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> APPUSERTYPEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CABINETIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CCALLEMAILTODIRECTORField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CITYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string COMMENTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CONTACTPERSONField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATECREATEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DIRECTOREMAILField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DIRECTORNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DIRECTORPHONEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMAILADDRESSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LOGOIMAGEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ORGANIZATIONSTATUSIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ORGANIZATIONTYPEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PASSWORDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PHONEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SALESREPIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string STATECODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string USERNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WHOSPAYINGField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZIPCODEField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDRESS1 {
            get {
                return this.ADDRESS1Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDRESS1Field, value) != true)) {
                    this.ADDRESS1Field = value;
                    this.RaisePropertyChanged("ADDRESS1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDRESS2 {
            get {
                return this.ADDRESS2Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDRESS2Field, value) != true)) {
                    this.ADDRESS2Field = value;
                    this.RaisePropertyChanged("ADDRESS2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ALLOWCOACHTOCREATEEVENTS {
            get {
                return this.ALLOWCOACHTOCREATEEVENTSField;
            }
            set {
                if ((object.ReferenceEquals(this.ALLOWCOACHTOCREATEEVENTSField, value) != true)) {
                    this.ALLOWCOACHTOCREATEEVENTSField = value;
                    this.RaisePropertyChanged("ALLOWCOACHTOCREATEEVENTS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> APPUSERTYPEID {
            get {
                return this.APPUSERTYPEIDField;
            }
            set {
                if ((this.APPUSERTYPEIDField.Equals(value) != true)) {
                    this.APPUSERTYPEIDField = value;
                    this.RaisePropertyChanged("APPUSERTYPEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CABINETID {
            get {
                return this.CABINETIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CABINETIDField, value) != true)) {
                    this.CABINETIDField = value;
                    this.RaisePropertyChanged("CABINETID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CCALLEMAILTODIRECTOR {
            get {
                return this.CCALLEMAILTODIRECTORField;
            }
            set {
                if ((object.ReferenceEquals(this.CCALLEMAILTODIRECTORField, value) != true)) {
                    this.CCALLEMAILTODIRECTORField = value;
                    this.RaisePropertyChanged("CCALLEMAILTODIRECTOR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CITY {
            get {
                return this.CITYField;
            }
            set {
                if ((object.ReferenceEquals(this.CITYField, value) != true)) {
                    this.CITYField = value;
                    this.RaisePropertyChanged("CITY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMMENT {
            get {
                return this.COMMENTField;
            }
            set {
                if ((object.ReferenceEquals(this.COMMENTField, value) != true)) {
                    this.COMMENTField = value;
                    this.RaisePropertyChanged("COMMENT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CONTACTPERSON {
            get {
                return this.CONTACTPERSONField;
            }
            set {
                if ((object.ReferenceEquals(this.CONTACTPERSONField, value) != true)) {
                    this.CONTACTPERSONField = value;
                    this.RaisePropertyChanged("CONTACTPERSON");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATECREATED {
            get {
                return this.DATECREATEDField;
            }
            set {
                if ((this.DATECREATEDField.Equals(value) != true)) {
                    this.DATECREATEDField = value;
                    this.RaisePropertyChanged("DATECREATED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DIRECTOREMAIL {
            get {
                return this.DIRECTOREMAILField;
            }
            set {
                if ((object.ReferenceEquals(this.DIRECTOREMAILField, value) != true)) {
                    this.DIRECTOREMAILField = value;
                    this.RaisePropertyChanged("DIRECTOREMAIL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DIRECTORNAME {
            get {
                return this.DIRECTORNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.DIRECTORNAMEField, value) != true)) {
                    this.DIRECTORNAMEField = value;
                    this.RaisePropertyChanged("DIRECTORNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DIRECTORPHONE {
            get {
                return this.DIRECTORPHONEField;
            }
            set {
                if ((object.ReferenceEquals(this.DIRECTORPHONEField, value) != true)) {
                    this.DIRECTORPHONEField = value;
                    this.RaisePropertyChanged("DIRECTORPHONE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMAILADDRESS {
            get {
                return this.EMAILADDRESSField;
            }
            set {
                if ((object.ReferenceEquals(this.EMAILADDRESSField, value) != true)) {
                    this.EMAILADDRESSField = value;
                    this.RaisePropertyChanged("EMAILADDRESS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOGOIMAGE {
            get {
                return this.LOGOIMAGEField;
            }
            set {
                if ((object.ReferenceEquals(this.LOGOIMAGEField, value) != true)) {
                    this.LOGOIMAGEField = value;
                    this.RaisePropertyChanged("LOGOIMAGE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NAME {
            get {
                return this.NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.NAMEField, value) != true)) {
                    this.NAMEField = value;
                    this.RaisePropertyChanged("NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ORGANIZATIONSTATUSID {
            get {
                return this.ORGANIZATIONSTATUSIDField;
            }
            set {
                if ((this.ORGANIZATIONSTATUSIDField.Equals(value) != true)) {
                    this.ORGANIZATIONSTATUSIDField = value;
                    this.RaisePropertyChanged("ORGANIZATIONSTATUSID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ORGANIZATIONTYPEID {
            get {
                return this.ORGANIZATIONTYPEIDField;
            }
            set {
                if ((this.ORGANIZATIONTYPEIDField.Equals(value) != true)) {
                    this.ORGANIZATIONTYPEIDField = value;
                    this.RaisePropertyChanged("ORGANIZATIONTYPEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PASSWORD {
            get {
                return this.PASSWORDField;
            }
            set {
                if ((object.ReferenceEquals(this.PASSWORDField, value) != true)) {
                    this.PASSWORDField = value;
                    this.RaisePropertyChanged("PASSWORD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PHONE {
            get {
                return this.PHONEField;
            }
            set {
                if ((object.ReferenceEquals(this.PHONEField, value) != true)) {
                    this.PHONEField = value;
                    this.RaisePropertyChanged("PHONE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SALESREPID {
            get {
                return this.SALESREPIDField;
            }
            set {
                if ((this.SALESREPIDField.Equals(value) != true)) {
                    this.SALESREPIDField = value;
                    this.RaisePropertyChanged("SALESREPID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string STATECODE {
            get {
                return this.STATECODEField;
            }
            set {
                if ((object.ReferenceEquals(this.STATECODEField, value) != true)) {
                    this.STATECODEField = value;
                    this.RaisePropertyChanged("STATECODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string USERNAME {
            get {
                return this.USERNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.USERNAMEField, value) != true)) {
                    this.USERNAMEField = value;
                    this.RaisePropertyChanged("USERNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WHOSPAYING {
            get {
                return this.WHOSPAYINGField;
            }
            set {
                if ((object.ReferenceEquals(this.WHOSPAYINGField, value) != true)) {
                    this.WHOSPAYINGField = value;
                    this.RaisePropertyChanged("WHOSPAYING");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZIPCODE {
            get {
                return this.ZIPCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.ZIPCODEField, value) != true)) {
                    this.ZIPCODEField = value;
                    this.RaisePropertyChanged("ZIPCODE");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaymentHistoryDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class PaymentHistoryDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> AMOUNTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AUTHORIZATIONNUMBERField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATEPURCHASEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ITEMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LAST4CCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PRIMARYAPPUSERIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PROMOCODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> QUANTITYField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> AMOUNT {
            get {
                return this.AMOUNTField;
            }
            set {
                if ((this.AMOUNTField.Equals(value) != true)) {
                    this.AMOUNTField = value;
                    this.RaisePropertyChanged("AMOUNT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AUTHORIZATIONNUMBER {
            get {
                return this.AUTHORIZATIONNUMBERField;
            }
            set {
                if ((object.ReferenceEquals(this.AUTHORIZATIONNUMBERField, value) != true)) {
                    this.AUTHORIZATIONNUMBERField = value;
                    this.RaisePropertyChanged("AUTHORIZATIONNUMBER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATEPURCHASED {
            get {
                return this.DATEPURCHASEDField;
            }
            set {
                if ((this.DATEPURCHASEDField.Equals(value) != true)) {
                    this.DATEPURCHASEDField = value;
                    this.RaisePropertyChanged("DATEPURCHASED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ITEM {
            get {
                return this.ITEMField;
            }
            set {
                if ((object.ReferenceEquals(this.ITEMField, value) != true)) {
                    this.ITEMField = value;
                    this.RaisePropertyChanged("ITEM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LAST4CC {
            get {
                return this.LAST4CCField;
            }
            set {
                if ((object.ReferenceEquals(this.LAST4CCField, value) != true)) {
                    this.LAST4CCField = value;
                    this.RaisePropertyChanged("LAST4CC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NAME {
            get {
                return this.NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.NAMEField, value) != true)) {
                    this.NAMEField = value;
                    this.RaisePropertyChanged("NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PRIMARYAPPUSERID {
            get {
                return this.PRIMARYAPPUSERIDField;
            }
            set {
                if ((this.PRIMARYAPPUSERIDField.Equals(value) != true)) {
                    this.PRIMARYAPPUSERIDField = value;
                    this.RaisePropertyChanged("PRIMARYAPPUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PROMOCODE {
            get {
                return this.PROMOCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.PROMOCODEField, value) != true)) {
                    this.PROMOCODEField = value;
                    this.RaisePropertyChanged("PROMOCODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> QUANTITY {
            get {
                return this.QUANTITYField;
            }
            set {
                if ((this.QUANTITYField.Equals(value) != true)) {
                    this.QUANTITYField = value;
                    this.RaisePropertyChanged("QUANTITY");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SalesRepDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class SalesRepDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDRESS1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDRESS2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CITYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string COMMENTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CONTACTPERSONField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATECREATEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DEACTIVATEDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMAILADDRESSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIRSTNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LASTNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PASSWORDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PHONEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SALESREPSTATUSIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string STATECODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZIPCODEField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDRESS1 {
            get {
                return this.ADDRESS1Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDRESS1Field, value) != true)) {
                    this.ADDRESS1Field = value;
                    this.RaisePropertyChanged("ADDRESS1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDRESS2 {
            get {
                return this.ADDRESS2Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDRESS2Field, value) != true)) {
                    this.ADDRESS2Field = value;
                    this.RaisePropertyChanged("ADDRESS2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CITY {
            get {
                return this.CITYField;
            }
            set {
                if ((object.ReferenceEquals(this.CITYField, value) != true)) {
                    this.CITYField = value;
                    this.RaisePropertyChanged("CITY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMMENT {
            get {
                return this.COMMENTField;
            }
            set {
                if ((object.ReferenceEquals(this.COMMENTField, value) != true)) {
                    this.COMMENTField = value;
                    this.RaisePropertyChanged("COMMENT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CONTACTPERSON {
            get {
                return this.CONTACTPERSONField;
            }
            set {
                if ((object.ReferenceEquals(this.CONTACTPERSONField, value) != true)) {
                    this.CONTACTPERSONField = value;
                    this.RaisePropertyChanged("CONTACTPERSON");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATECREATED {
            get {
                return this.DATECREATEDField;
            }
            set {
                if ((this.DATECREATEDField.Equals(value) != true)) {
                    this.DATECREATEDField = value;
                    this.RaisePropertyChanged("DATECREATED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DEACTIVATEDATE {
            get {
                return this.DEACTIVATEDATEField;
            }
            set {
                if ((this.DEACTIVATEDATEField.Equals(value) != true)) {
                    this.DEACTIVATEDATEField = value;
                    this.RaisePropertyChanged("DEACTIVATEDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMAILADDRESS {
            get {
                return this.EMAILADDRESSField;
            }
            set {
                if ((object.ReferenceEquals(this.EMAILADDRESSField, value) != true)) {
                    this.EMAILADDRESSField = value;
                    this.RaisePropertyChanged("EMAILADDRESS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIRSTNAME {
            get {
                return this.FIRSTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.FIRSTNAMEField, value) != true)) {
                    this.FIRSTNAMEField = value;
                    this.RaisePropertyChanged("FIRSTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LASTNAME {
            get {
                return this.LASTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.LASTNAMEField, value) != true)) {
                    this.LASTNAMEField = value;
                    this.RaisePropertyChanged("LASTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PASSWORD {
            get {
                return this.PASSWORDField;
            }
            set {
                if ((object.ReferenceEquals(this.PASSWORDField, value) != true)) {
                    this.PASSWORDField = value;
                    this.RaisePropertyChanged("PASSWORD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PHONE {
            get {
                return this.PHONEField;
            }
            set {
                if ((object.ReferenceEquals(this.PHONEField, value) != true)) {
                    this.PHONEField = value;
                    this.RaisePropertyChanged("PHONE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SALESREPSTATUSID {
            get {
                return this.SALESREPSTATUSIDField;
            }
            set {
                if ((this.SALESREPSTATUSIDField.Equals(value) != true)) {
                    this.SALESREPSTATUSIDField = value;
                    this.RaisePropertyChanged("SALESREPSTATUSID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string STATECODE {
            get {
                return this.STATECODEField;
            }
            set {
                if ((object.ReferenceEquals(this.STATECODEField, value) != true)) {
                    this.STATECODEField = value;
                    this.RaisePropertyChanged("STATECODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZIPCODE {
            get {
                return this.ZIPCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.ZIPCODEField, value) != true)) {
                    this.ZIPCODEField = value;
                    this.RaisePropertyChanged("ZIPCODE");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ShareKeyDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class ShareKeyDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> AMOUNTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> APPUSERIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.AppUserDTO ApplicationUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATECREATEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LAST4CCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PAYMENTTYPEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PRIMARYAPPUSERIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PROMOCODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PURCHASEDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SALESREPIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SHAREKEYCODEField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> AMOUNT {
            get {
                return this.AMOUNTField;
            }
            set {
                if ((this.AMOUNTField.Equals(value) != true)) {
                    this.AMOUNTField = value;
                    this.RaisePropertyChanged("AMOUNT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> APPUSERID {
            get {
                return this.APPUSERIDField;
            }
            set {
                if ((this.APPUSERIDField.Equals(value) != true)) {
                    this.APPUSERIDField = value;
                    this.RaisePropertyChanged("APPUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.AppUserDTO ApplicationUser {
            get {
                return this.ApplicationUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationUserField, value) != true)) {
                    this.ApplicationUserField = value;
                    this.RaisePropertyChanged("ApplicationUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATECREATED {
            get {
                return this.DATECREATEDField;
            }
            set {
                if ((this.DATECREATEDField.Equals(value) != true)) {
                    this.DATECREATEDField = value;
                    this.RaisePropertyChanged("DATECREATED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LAST4CC {
            get {
                return this.LAST4CCField;
            }
            set {
                if ((object.ReferenceEquals(this.LAST4CCField, value) != true)) {
                    this.LAST4CCField = value;
                    this.RaisePropertyChanged("LAST4CC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PAYMENTTYPEID {
            get {
                return this.PAYMENTTYPEIDField;
            }
            set {
                if ((this.PAYMENTTYPEIDField.Equals(value) != true)) {
                    this.PAYMENTTYPEIDField = value;
                    this.RaisePropertyChanged("PAYMENTTYPEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PRIMARYAPPUSERID {
            get {
                return this.PRIMARYAPPUSERIDField;
            }
            set {
                if ((this.PRIMARYAPPUSERIDField.Equals(value) != true)) {
                    this.PRIMARYAPPUSERIDField = value;
                    this.RaisePropertyChanged("PRIMARYAPPUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PROMOCODE {
            get {
                return this.PROMOCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.PROMOCODEField, value) != true)) {
                    this.PROMOCODEField = value;
                    this.RaisePropertyChanged("PROMOCODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PURCHASEDATE {
            get {
                return this.PURCHASEDATEField;
            }
            set {
                if ((this.PURCHASEDATEField.Equals(value) != true)) {
                    this.PURCHASEDATEField = value;
                    this.RaisePropertyChanged("PURCHASEDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SALESREPID {
            get {
                return this.SALESREPIDField;
            }
            set {
                if ((this.SALESREPIDField.Equals(value) != true)) {
                    this.SALESREPIDField = value;
                    this.RaisePropertyChanged("SALESREPID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SHAREKEYCODE {
            get {
                return this.SHAREKEYCODEField;
            }
            set {
                if ((object.ReferenceEquals(this.SHAREKEYCODEField, value) != true)) {
                    this.SHAREKEYCODEField = value;
                    this.RaisePropertyChanged("SHAREKEYCODE");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamEventDocumentDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class TeamEventDocumentDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DOCUMENTNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ENTERWHOSCANNEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ISCOACHDOCUMENTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MUSTBEVERIFIEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PLAYERENTERDOCUMENTDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PLAYERENTEREXPIRATIONField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ROSTERCLOSEDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SCANNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TEAMEVENTDOCUMENTSTATUSIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TEAMEVENTIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VERIFIERNAMEField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DOCUMENTNAME {
            get {
                return this.DOCUMENTNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.DOCUMENTNAMEField, value) != true)) {
                    this.DOCUMENTNAMEField = value;
                    this.RaisePropertyChanged("DOCUMENTNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DocumentId {
            get {
                return this.DocumentIdField;
            }
            set {
                if ((this.DocumentIdField.Equals(value) != true)) {
                    this.DocumentIdField = value;
                    this.RaisePropertyChanged("DocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ENTERWHOSCANNED {
            get {
                return this.ENTERWHOSCANNEDField;
            }
            set {
                if ((object.ReferenceEquals(this.ENTERWHOSCANNEDField, value) != true)) {
                    this.ENTERWHOSCANNEDField = value;
                    this.RaisePropertyChanged("ENTERWHOSCANNED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISCOACHDOCUMENT {
            get {
                return this.ISCOACHDOCUMENTField;
            }
            set {
                if ((object.ReferenceEquals(this.ISCOACHDOCUMENTField, value) != true)) {
                    this.ISCOACHDOCUMENTField = value;
                    this.RaisePropertyChanged("ISCOACHDOCUMENT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MUSTBEVERIFIED {
            get {
                return this.MUSTBEVERIFIEDField;
            }
            set {
                if ((object.ReferenceEquals(this.MUSTBEVERIFIEDField, value) != true)) {
                    this.MUSTBEVERIFIEDField = value;
                    this.RaisePropertyChanged("MUSTBEVERIFIED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PLAYERENTERDOCUMENTDATE {
            get {
                return this.PLAYERENTERDOCUMENTDATEField;
            }
            set {
                if ((this.PLAYERENTERDOCUMENTDATEField.Equals(value) != true)) {
                    this.PLAYERENTERDOCUMENTDATEField = value;
                    this.RaisePropertyChanged("PLAYERENTERDOCUMENTDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PLAYERENTEREXPIRATION {
            get {
                return this.PLAYERENTEREXPIRATIONField;
            }
            set {
                if ((this.PLAYERENTEREXPIRATIONField.Equals(value) != true)) {
                    this.PLAYERENTEREXPIRATIONField = value;
                    this.RaisePropertyChanged("PLAYERENTEREXPIRATION");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ROSTERCLOSEDATE {
            get {
                return this.ROSTERCLOSEDATEField;
            }
            set {
                if ((this.ROSTERCLOSEDATEField.Equals(value) != true)) {
                    this.ROSTERCLOSEDATEField = value;
                    this.RaisePropertyChanged("ROSTERCLOSEDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SCANNAME {
            get {
                return this.SCANNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.SCANNAMEField, value) != true)) {
                    this.SCANNAMEField = value;
                    this.RaisePropertyChanged("SCANNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TEAMEVENTDOCUMENTSTATUSID {
            get {
                return this.TEAMEVENTDOCUMENTSTATUSIDField;
            }
            set {
                if ((this.TEAMEVENTDOCUMENTSTATUSIDField.Equals(value) != true)) {
                    this.TEAMEVENTDOCUMENTSTATUSIDField = value;
                    this.RaisePropertyChanged("TEAMEVENTDOCUMENTSTATUSID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TEAMEVENTID {
            get {
                return this.TEAMEVENTIDField;
            }
            set {
                if ((this.TEAMEVENTIDField.Equals(value) != true)) {
                    this.TEAMEVENTIDField = value;
                    this.RaisePropertyChanged("TEAMEVENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VERIFIERNAME {
            get {
                return this.VERIFIERNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.VERIFIERNAMEField, value) != true)) {
                    this.VERIFIERNAMEField = value;
                    this.RaisePropertyChanged("VERIFIERNAME");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamEventPlayerRosterDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class TeamEventPlayerRosterDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> APPUSERIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATECREATEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> JERSEYNUMBERField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PLAYERPOSITIONField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequiresVerificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TEAMEVENTIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> USERSTAGETYPEIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> APPUSERID {
            get {
                return this.APPUSERIDField;
            }
            set {
                if ((this.APPUSERIDField.Equals(value) != true)) {
                    this.APPUSERIDField = value;
                    this.RaisePropertyChanged("APPUSERID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATECREATED {
            get {
                return this.DATECREATEDField;
            }
            set {
                if ((this.DATECREATEDField.Equals(value) != true)) {
                    this.DATECREATEDField = value;
                    this.RaisePropertyChanged("DATECREATED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> JERSEYNUMBER {
            get {
                return this.JERSEYNUMBERField;
            }
            set {
                if ((this.JERSEYNUMBERField.Equals(value) != true)) {
                    this.JERSEYNUMBERField = value;
                    this.RaisePropertyChanged("JERSEYNUMBER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PLAYERPOSITION {
            get {
                return this.PLAYERPOSITIONField;
            }
            set {
                if ((object.ReferenceEquals(this.PLAYERPOSITIONField, value) != true)) {
                    this.PLAYERPOSITIONField = value;
                    this.RaisePropertyChanged("PLAYERPOSITION");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerName {
            get {
                return this.PlayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerNameField, value) != true)) {
                    this.PlayerNameField = value;
                    this.RaisePropertyChanged("PlayerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RequiresVerification {
            get {
                return this.RequiresVerificationField;
            }
            set {
                if ((this.RequiresVerificationField.Equals(value) != true)) {
                    this.RequiresVerificationField = value;
                    this.RaisePropertyChanged("RequiresVerification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sex {
            get {
                return this.SexField;
            }
            set {
                if ((object.ReferenceEquals(this.SexField, value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TEAMEVENTID {
            get {
                return this.TEAMEVENTIDField;
            }
            set {
                if ((this.TEAMEVENTIDField.Equals(value) != true)) {
                    this.TEAMEVENTIDField = value;
                    this.RaisePropertyChanged("TEAMEVENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> USERSTAGETYPEID {
            get {
                return this.USERSTAGETYPEIDField;
            }
            set {
                if ((this.USERSTAGETYPEIDField.Equals(value) != true)) {
                    this.USERSTAGETYPEIDField = value;
                    this.RaisePropertyChanged("USERSTAGETYPEID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamEventDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class TeamEventDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DATECREATEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EXPIRESDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ISDELETEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ORGANIZATIONIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> STARTDATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> YEARCODEField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DATECREATED {
            get {
                return this.DATECREATEDField;
            }
            set {
                if ((this.DATECREATEDField.Equals(value) != true)) {
                    this.DATECREATEDField = value;
                    this.RaisePropertyChanged("DATECREATED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EXPIRESDATE {
            get {
                return this.EXPIRESDATEField;
            }
            set {
                if ((this.EXPIRESDATEField.Equals(value) != true)) {
                    this.EXPIRESDATEField = value;
                    this.RaisePropertyChanged("EXPIRESDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISDELETED {
            get {
                return this.ISDELETEDField;
            }
            set {
                if ((object.ReferenceEquals(this.ISDELETEDField, value) != true)) {
                    this.ISDELETEDField = value;
                    this.RaisePropertyChanged("ISDELETED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NAME {
            get {
                return this.NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.NAMEField, value) != true)) {
                    this.NAMEField = value;
                    this.RaisePropertyChanged("NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ORGANIZATIONID {
            get {
                return this.ORGANIZATIONIDField;
            }
            set {
                if ((this.ORGANIZATIONIDField.Equals(value) != true)) {
                    this.ORGANIZATIONIDField = value;
                    this.RaisePropertyChanged("ORGANIZATIONID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrganizationName {
            get {
                return this.OrganizationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationNameField, value) != true)) {
                    this.OrganizationNameField = value;
                    this.RaisePropertyChanged("OrganizationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> STARTDATE {
            get {
                return this.STARTDATEField;
            }
            set {
                if ((this.STARTDATEField.Equals(value) != true)) {
                    this.STARTDATEField = value;
                    this.RaisePropertyChanged("STARTDATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> YEARCODE {
            get {
                return this.YEARCODEField;
            }
            set {
                if ((this.YEARCODEField.Equals(value) != true)) {
                    this.YEARCODEField = value;
                    this.RaisePropertyChanged("YEARCODE");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssociateDocumentDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class AssociateDocumentDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int appUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string commentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool emergencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fileCabinetDocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int organizationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool removeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int teamEventDocumentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int appUserId {
            get {
                return this.appUserIdField;
            }
            set {
                if ((this.appUserIdField.Equals(value) != true)) {
                    this.appUserIdField = value;
                    this.RaisePropertyChanged("appUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                if ((object.ReferenceEquals(this.commentField, value) != true)) {
                    this.commentField = value;
                    this.RaisePropertyChanged("comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool emergency {
            get {
                return this.emergencyField;
            }
            set {
                if ((this.emergencyField.Equals(value) != true)) {
                    this.emergencyField = value;
                    this.RaisePropertyChanged("emergency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fileCabinetDocumentId {
            get {
                return this.fileCabinetDocumentIdField;
            }
            set {
                if ((this.fileCabinetDocumentIdField.Equals(value) != true)) {
                    this.fileCabinetDocumentIdField = value;
                    this.RaisePropertyChanged("fileCabinetDocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int organizationId {
            get {
                return this.organizationIdField;
            }
            set {
                if ((this.organizationIdField.Equals(value) != true)) {
                    this.organizationIdField = value;
                    this.RaisePropertyChanged("organizationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool remove {
            get {
                return this.removeField;
            }
            set {
                if ((this.removeField.Equals(value) != true)) {
                    this.removeField = value;
                    this.RaisePropertyChanged("remove");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int teamEventDocumentId {
            get {
                return this.teamEventDocumentIdField;
            }
            set {
                if ((this.teamEventDocumentIdField.Equals(value) != true)) {
                    this.teamEventDocumentIdField = value;
                    this.RaisePropertyChanged("teamEventDocumentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileCabinetDocumentSingleDTO", Namespace="http://schemas.datacontract.org/2004/07/MyFileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileCabinetDocumentSingleDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FILECABINETDOCUMENTIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TEAMEVENTDOCUMENTIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> VerifiedAppUserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FILECABINETDOCUMENTID {
            get {
                return this.FILECABINETDOCUMENTIDField;
            }
            set {
                if ((this.FILECABINETDOCUMENTIDField.Equals(value) != true)) {
                    this.FILECABINETDOCUMENTIDField = value;
                    this.RaisePropertyChanged("FILECABINETDOCUMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TEAMEVENTDOCUMENTID {
            get {
                return this.TEAMEVENTDOCUMENTIDField;
            }
            set {
                if ((this.TEAMEVENTDOCUMENTIDField.Equals(value) != true)) {
                    this.TEAMEVENTDOCUMENTIDField = value;
                    this.RaisePropertyChanged("TEAMEVENTDOCUMENTID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VerifiedAppUserId {
            get {
                return this.VerifiedAppUserIdField;
            }
            set {
                if ((this.VerifiedAppUserIdField.Equals(value) != true)) {
                    this.VerifiedAppUserIdField = value;
                    this.RaisePropertyChanged("VerifiedAppUserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItResponse", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.FileItCabinet CabinetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.FileItDocument[] DocumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> FileNameFileItIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.FileItCabinet Cabinet {
            get {
                return this.CabinetField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetField, value) != true)) {
                    this.CabinetField = value;
                    this.RaisePropertyChanged("Cabinet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.FileItDocument[] Documents {
            get {
                return this.DocumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentsField, value) != true)) {
                    this.DocumentsField = value;
                    this.RaisePropertyChanged("Documents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> FileNameFileItID {
            get {
                return this.FileNameFileItIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameFileItIDField, value) != true)) {
                    this.FileNameFileItIDField = value;
                    this.RaisePropertyChanged("FileNameFileItID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItCabinet", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItCabinet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CabinetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CabinetNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.FileItTemplate TemplateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CabinetId {
            get {
                return this.CabinetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetIdField, value) != true)) {
                    this.CabinetIdField = value;
                    this.RaisePropertyChanged("CabinetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CabinetName {
            get {
                return this.CabinetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetNameField, value) != true)) {
                    this.CabinetNameField = value;
                    this.RaisePropertyChanged("CabinetName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.FileItTemplate Template {
            get {
                return this.TemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateField, value) != true)) {
                    this.TemplateField = value;
                    this.RaisePropertyChanged("Template");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItDocument", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItDocument : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CabinetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageBase64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> IndexInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebImageBase64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebImageBase64SrcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebImageThumbBase64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebImageThumbBase64SrcField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CabinetID {
            get {
                return this.CabinetIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CabinetIDField, value) != true)) {
                    this.CabinetIDField = value;
                    this.RaisePropertyChanged("CabinetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageBase64 {
            get {
                return this.ImageBase64Field;
            }
            set {
                if ((object.ReferenceEquals(this.ImageBase64Field, value) != true)) {
                    this.ImageBase64Field = value;
                    this.RaisePropertyChanged("ImageBase64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> IndexInformation {
            get {
                return this.IndexInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexInformationField, value) != true)) {
                    this.IndexInformationField = value;
                    this.RaisePropertyChanged("IndexInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebImageBase64 {
            get {
                return this.WebImageBase64Field;
            }
            set {
                if ((object.ReferenceEquals(this.WebImageBase64Field, value) != true)) {
                    this.WebImageBase64Field = value;
                    this.RaisePropertyChanged("WebImageBase64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebImageBase64Src {
            get {
                return this.WebImageBase64SrcField;
            }
            set {
                if ((object.ReferenceEquals(this.WebImageBase64SrcField, value) != true)) {
                    this.WebImageBase64SrcField = value;
                    this.RaisePropertyChanged("WebImageBase64Src");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebImageThumbBase64 {
            get {
                return this.WebImageThumbBase64Field;
            }
            set {
                if ((object.ReferenceEquals(this.WebImageThumbBase64Field, value) != true)) {
                    this.WebImageThumbBase64Field = value;
                    this.RaisePropertyChanged("WebImageThumbBase64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WebImageThumbBase64Src {
            get {
                return this.WebImageThumbBase64SrcField;
            }
            set {
                if ((object.ReferenceEquals(this.WebImageThumbBase64SrcField, value) != true)) {
                    this.WebImageThumbBase64SrcField = value;
                    this.RaisePropertyChanged("WebImageThumbBase64Src");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItTemplate", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItTemplate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyFileItTestSite.MyFileIt.FileItTemplateDefinition[] TemplateDefinitionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemplateNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyFileItTestSite.MyFileIt.FileItTemplateDefinition[] TemplateDefinitions {
            get {
                return this.TemplateDefinitionsField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateDefinitionsField, value) != true)) {
                    this.TemplateDefinitionsField = value;
                    this.RaisePropertyChanged("TemplateDefinitions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TemplateName {
            get {
                return this.TemplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateNameField, value) != true)) {
                    this.TemplateNameField = value;
                    this.RaisePropertyChanged("TemplateName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItTemplateDefinition", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItTemplateDefinition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BARCODETYPEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DATATYPEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HIDECOLUMNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string INDEXNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short INDEXNUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> LINKEDFIELDIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LOOKUPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> MAXLENGTHField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MUSTENTERField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MUSTFILLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OCRACTIVEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SEARCHINDEXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TEMPLATENAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VIEWINDEXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> XCOORDINATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> YCOORDINATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> ZONEHEIGHTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> ZONEWIDTHField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BARCODETYPE {
            get {
                return this.BARCODETYPEField;
            }
            set {
                if ((object.ReferenceEquals(this.BARCODETYPEField, value) != true)) {
                    this.BARCODETYPEField = value;
                    this.RaisePropertyChanged("BARCODETYPE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DATATYPE {
            get {
                return this.DATATYPEField;
            }
            set {
                if ((object.ReferenceEquals(this.DATATYPEField, value) != true)) {
                    this.DATATYPEField = value;
                    this.RaisePropertyChanged("DATATYPE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HIDECOLUMN {
            get {
                return this.HIDECOLUMNField;
            }
            set {
                if ((object.ReferenceEquals(this.HIDECOLUMNField, value) != true)) {
                    this.HIDECOLUMNField = value;
                    this.RaisePropertyChanged("HIDECOLUMN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string INDEXNAME {
            get {
                return this.INDEXNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.INDEXNAMEField, value) != true)) {
                    this.INDEXNAMEField = value;
                    this.RaisePropertyChanged("INDEXNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short INDEXNUM {
            get {
                return this.INDEXNUMField;
            }
            set {
                if ((this.INDEXNUMField.Equals(value) != true)) {
                    this.INDEXNUMField = value;
                    this.RaisePropertyChanged("INDEXNUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> LINKEDFIELDID {
            get {
                return this.LINKEDFIELDIDField;
            }
            set {
                if ((this.LINKEDFIELDIDField.Equals(value) != true)) {
                    this.LINKEDFIELDIDField = value;
                    this.RaisePropertyChanged("LINKEDFIELDID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOOKUP {
            get {
                return this.LOOKUPField;
            }
            set {
                if ((object.ReferenceEquals(this.LOOKUPField, value) != true)) {
                    this.LOOKUPField = value;
                    this.RaisePropertyChanged("LOOKUP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> MAXLENGTH {
            get {
                return this.MAXLENGTHField;
            }
            set {
                if ((this.MAXLENGTHField.Equals(value) != true)) {
                    this.MAXLENGTHField = value;
                    this.RaisePropertyChanged("MAXLENGTH");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MUSTENTER {
            get {
                return this.MUSTENTERField;
            }
            set {
                if ((object.ReferenceEquals(this.MUSTENTERField, value) != true)) {
                    this.MUSTENTERField = value;
                    this.RaisePropertyChanged("MUSTENTER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MUSTFILL {
            get {
                return this.MUSTFILLField;
            }
            set {
                if ((object.ReferenceEquals(this.MUSTFILLField, value) != true)) {
                    this.MUSTFILLField = value;
                    this.RaisePropertyChanged("MUSTFILL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OCRACTIVE {
            get {
                return this.OCRACTIVEField;
            }
            set {
                if ((object.ReferenceEquals(this.OCRACTIVEField, value) != true)) {
                    this.OCRACTIVEField = value;
                    this.RaisePropertyChanged("OCRACTIVE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SEARCHINDEX {
            get {
                return this.SEARCHINDEXField;
            }
            set {
                if ((object.ReferenceEquals(this.SEARCHINDEXField, value) != true)) {
                    this.SEARCHINDEXField = value;
                    this.RaisePropertyChanged("SEARCHINDEX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TEMPLATENAME {
            get {
                return this.TEMPLATENAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.TEMPLATENAMEField, value) != true)) {
                    this.TEMPLATENAMEField = value;
                    this.RaisePropertyChanged("TEMPLATENAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VIEWINDEX {
            get {
                return this.VIEWINDEXField;
            }
            set {
                if ((object.ReferenceEquals(this.VIEWINDEXField, value) != true)) {
                    this.VIEWINDEXField = value;
                    this.RaisePropertyChanged("VIEWINDEX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> XCOORDINATE {
            get {
                return this.XCOORDINATEField;
            }
            set {
                if ((this.XCOORDINATEField.Equals(value) != true)) {
                    this.XCOORDINATEField = value;
                    this.RaisePropertyChanged("XCOORDINATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> YCOORDINATE {
            get {
                return this.YCOORDINATEField;
            }
            set {
                if ((this.YCOORDINATEField.Equals(value) != true)) {
                    this.YCOORDINATEField = value;
                    this.RaisePropertyChanged("YCOORDINATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ZONEHEIGHT {
            get {
                return this.ZONEHEIGHTField;
            }
            set {
                if ((this.ZONEHEIGHTField.Equals(value) != true)) {
                    this.ZONEHEIGHTField = value;
                    this.RaisePropertyChanged("ZONEHEIGHT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> ZONEWIDTH {
            get {
                return this.ZONEWIDTHField;
            }
            set {
                if ((this.ZONEWIDTHField.Equals(value) != true)) {
                    this.ZONEWIDTHField = value;
                    this.RaisePropertyChanged("ZONEWIDTH");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileItDocumentLookup", Namespace="http://schemas.datacontract.org/2004/07/FileItService.DTOs")]
    [System.SerializableAttribute()]
    public partial class FileItDocumentLookup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IndexNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LookupValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IndexNumber {
            get {
                return this.IndexNumberField;
            }
            set {
                if ((this.IndexNumberField.Equals(value) != true)) {
                    this.IndexNumberField = value;
                    this.RaisePropertyChanged("IndexNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LookupValue {
            get {
                return this.LookupValueField;
            }
            set {
                if ((object.ReferenceEquals(this.LookupValueField, value) != true)) {
                    this.LookupValueField = value;
                    this.RaisePropertyChanged("LookupValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyFileIt.IMyFileItAppService")]
    public interface IMyFileItAppService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/InitService", ReplyAction="http://tempuri.org/IMyFileItAppService/InitServiceResponse")]
        bool InitService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/InitService", ReplyAction="http://tempuri.org/IMyFileItAppService/InitServiceResponse")]
        System.Threading.Tasks.Task<bool> InitServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetReferenceData", ReplyAction="http://tempuri.org/IMyFileItAppService/GetReferenceDataResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetReferenceData(string user, string pass, string referenceTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetReferenceData", ReplyAction="http://tempuri.org/IMyFileItAppService/GetReferenceDataResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetReferenceDataAsync(string user, string pass, string referenceTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserOrganizations", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserOrganizationsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserOrganizations(string user, string pass, int appUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserOrganizations", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserOrganizationsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserOrganizationsAsync(string user, string pass, int appUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetOrganizations", ReplyAction="http://tempuri.org/IMyFileItAppService/GetOrganizationsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetOrganizations(string user, string pass, System.Nullable<int> organizationId, string nameLookup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetOrganizations", ReplyAction="http://tempuri.org/IMyFileItAppService/GetOrganizationsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetOrganizationsAsync(string user, string pass, System.Nullable<int> organizationId, string nameLookup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/AddOrganizationResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddOrganization(string user, string pass, MyFileItTestSite.MyFileIt.OrganizationDTO organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/AddOrganizationResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddOrganizationAsync(string user, string pass, MyFileItTestSite.MyFileIt.OrganizationDTO organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateOrganizationResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult UpdateOrganization(string user, string pass, MyFileItTestSite.MyFileIt.OrganizationDTO organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateOrganizationResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateOrganizationAsync(string user, string pass, MyFileItTestSite.MyFileIt.OrganizationDTO organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveOrganizationResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveOrganization(string user, string pass, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveOrganizationResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveOrganizationAsync(string user, string pass, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UploadFileCabinetDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/UploadFileCabinetDocumentResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult UploadFileCabinetDocument(string user, string pass, int appUserId, string filename, string base64Image, MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO doc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UploadFileCabinetDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/UploadFileCabinetDocumentResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UploadFileCabinetDocumentAsync(string user, string pass, int appUserId, string filename, string base64Image, MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO doc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/VerifyDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/VerifyDocumentResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult VerifyDocument(string user, string pass, int documentId, int verifyAppUserId, int teamEventDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/VerifyDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/VerifyDocumentResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> VerifyDocumentAsync(string user, string pass, int documentId, int verifyAppUserId, int teamEventDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddEmergencyShare", ReplyAction="http://tempuri.org/IMyFileItAppService/AddEmergencyShareResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddEmergencyShare(string user, string pass, int appUserId, int[] fileCabinetDocumentIds, string emergencyEmailAddress, string emailMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddEmergencyShare", ReplyAction="http://tempuri.org/IMyFileItAppService/AddEmergencyShareResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddEmergencyShareAsync(string user, string pass, int appUserId, int[] fileCabinetDocumentIds, string emergencyEmailAddress, string emailMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateDocumentsToTeamEventDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateDocumentsToTeamEventDocumentsResp" +
            "onse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AssociateDocumentsToTeamEventDocuments(string user, string pass, MyFileItTestSite.MyFileIt.AssociateDocumentDTO[] associations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateDocumentsToTeamEventDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateDocumentsToTeamEventDocumentsResp" +
            "onse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateDocumentsToTeamEventDocumentsAsync(string user, string pass, MyFileItTestSite.MyFileIt.AssociateDocumentDTO[] associations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/ResendAssociatedDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/ResendAssociatedDocumentsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult ResendAssociatedDocuments(string user, string pass, int appUserId, System.Nullable<int> teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/ResendAssociatedDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/ResendAssociatedDocumentsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> ResendAssociatedDocumentsAsync(string user, string pass, int appUserId, System.Nullable<int> teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateDocumentToTeamEventDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateDocumentToTeamEventDocumentRespon" +
            "se")]
        MyFileItTestSite.MyFileIt.MyFileItResult AssociateDocumentToTeamEventDocument(string user, string pass, int appUserId, int organizationId, int fileCabinetDocumentId, int teamEventDocumentId, string comment, bool emergency, bool remove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateDocumentToTeamEventDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateDocumentToTeamEventDocumentRespon" +
            "se")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateDocumentToTeamEventDocumentAsync(string user, string pass, int appUserId, int organizationId, int fileCabinetDocumentId, int teamEventDocumentId, string comment, bool emergency, bool remove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RejectTeamEventDocumentShare", ReplyAction="http://tempuri.org/IMyFileItAppService/RejectTeamEventDocumentShareResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RejectTeamEventDocumentShare(string user, string pass, int appUserId, int teamEventDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RejectTeamEventDocumentShare", ReplyAction="http://tempuri.org/IMyFileItAppService/RejectTeamEventDocumentShareResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RejectTeamEventDocumentShareAsync(string user, string pass, int appUserId, int teamEventDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventsByAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventsByAppUserResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventsByAppUser(string user, string pass, int appUserId, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventsByAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventsByAppUserResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventsByAppUserAsync(string user, string pass, int appUserId, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventsByCoach", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventsByCoachResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventsByCoach(string user, string pass, int appUserId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventsByCoach", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventsByCoachResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventsByCoachAsync(string user, string pass, int appUserId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEvents", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEvents(string user, string pass, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEvents", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventsAsync(string user, string pass, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/ValidateTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/ValidateTeamEventResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult ValidateTeamEvent(string user, string pass, string teamEventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/ValidateTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/ValidateTeamEventResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> ValidateTeamEventAsync(string user, string pass, string teamEventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/AddTeamEventResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddTeamEvent(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDTO teamEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/AddTeamEventResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddTeamEventAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDTO teamEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateTeamEventResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult UpdateTeamEvent(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDTO teamEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateTeamEventResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateTeamEventAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDTO teamEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveTeamEventResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveTeamEvent(string user, string pass, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveTeamEventResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveTeamEventAsync(string user, string pass, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/CheckAppUserExists", ReplyAction="http://tempuri.org/IMyFileItAppService/CheckAppUserExistsResponse")]
        bool CheckAppUserExists(string user, string pass, string appUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/CheckAppUserExists", ReplyAction="http://tempuri.org/IMyFileItAppService/CheckAppUserExistsResponse")]
        System.Threading.Tasks.Task<bool> CheckAppUserExistsAsync(string user, string pass, string appUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/LoginAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/LoginAppUserResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult LoginAppUser(string user, string pass, string appUserName, string appUserPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/LoginAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/LoginAppUserResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> LoginAppUserAsync(string user, string pass, string appUserName, string appUserPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/ForgotPassword", ReplyAction="http://tempuri.org/IMyFileItAppService/ForgotPasswordResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult ForgotPassword(string user, string pass, string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/ForgotPassword", ReplyAction="http://tempuri.org/IMyFileItAppService/ForgotPasswordResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> ForgotPasswordAsync(string user, string pass, string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUsers", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUsersResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUsers(string user, string pass, System.Nullable<int> appUserId, string nameLookup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUsers", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUsersResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUsersAsync(string user, string pass, System.Nullable<int> appUserId, string nameLookup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAllAppUsers", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAllAppUsersResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAllAppUsers(string user, string pass, System.Nullable<int> organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAllAppUsers", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAllAppUsersResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAllAppUsersAsync(string user, string pass, System.Nullable<int> organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUsersByEmail", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUsersByEmailResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUsersByEmail(string user, string pass, string userName, string emailAddress, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUsersByEmail", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUsersByEmailResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUsersByEmailAsync(string user, string pass, string userName, string emailAddress, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUsersByPhoneNumber", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUsersByPhoneNumberResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUsersByPhoneNumber(string user, string pass, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUsersByPhoneNumber", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUsersByPhoneNumberResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUsersByPhoneNumberAsync(string user, string pass, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUsersByNameSexEmail", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUsersByNameSexEmailResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUsersByNameSexEmail(string user, string pass, int appUserId, int teamEventId, string firstName, string lastName, string parentEmailAddress, string sex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUsersByNameSexEmail", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUsersByNameSexEmailResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUsersByNameSexEmailAsync(string user, string pass, int appUserId, int teamEventId, string firstName, string lastName, string parentEmailAddress, string sex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCoachMembers", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCoachMembersResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetCoachMembers(string user, string pass, int appUserId, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string nameLookup, string parentEmailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCoachMembers", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCoachMembersResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetCoachMembersAsync(string user, string pass, int appUserId, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string nameLookup, string parentEmailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/AddAppUserResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddAppUser(string user, string pass, MyFileItTestSite.MyFileIt.AppUserDTO appUser, System.Nullable<int> autoSignUpOrganizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/AddAppUserResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddAppUserAsync(string user, string pass, MyFileItTestSite.MyFileIt.AppUserDTO appUser, System.Nullable<int> autoSignUpOrganizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateAppUserToOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateAppUserToOrganizationResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AssociateAppUserToOrganization(string user, string pass, int appUserId, int appUserTypeId, int organizationId, System.DateTime startDate, System.DateTime expiresDate, System.Nullable<int> yearCode, int sportTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateAppUserToOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateAppUserToOrganizationResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateAppUserToOrganizationAsync(string user, string pass, int appUserId, int appUserTypeId, int organizationId, System.DateTime startDate, System.DateTime expiresDate, System.Nullable<int> yearCode, int sportTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveAppUserFromOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveAppUserFromOrganizationResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveAppUserFromOrganization(string user, string pass, int appUserId, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveAppUserFromOrganization", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveAppUserFromOrganizationResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveAppUserFromOrganizationAsync(string user, string pass, int appUserId, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateAppUserResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult UpdateAppUser(string user, string pass, MyFileItTestSite.MyFileIt.AppUserDTO appUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateAppUserResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateAppUserAsync(string user, string pass, MyFileItTestSite.MyFileIt.AppUserDTO appUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveAppUserResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveAppUser(string user, string pass, int appUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveAppUserResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveAppUserAsync(string user, string pass, int appUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateAppUserStatus", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateAppUserStatusResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult UpdateAppUserStatus(string user, string pass, int appUserId, int appUserStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateAppUserStatus", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateAppUserStatusResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateAppUserStatusAsync(string user, string pass, int appUserId, int appUserStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetFamilyUsers", ReplyAction="http://tempuri.org/IMyFileItAppService/GetFamilyUsersResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetFamilyUsers(string user, string pass, int primaryAppUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetFamilyUsers", ReplyAction="http://tempuri.org/IMyFileItAppService/GetFamilyUsersResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetFamilyUsersAsync(string user, string pass, int primaryAppUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetSingleDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/GetSingleDocumentResponse")]
        MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO GetSingleDocument(string user, string pass, MyFileItTestSite.MyFileIt.FileCabinetDocumentSingleDTO lookup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetSingleDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/GetSingleDocumentResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO> GetSingleDocumentAsync(string user, string pass, MyFileItTestSite.MyFileIt.FileCabinetDocumentSingleDTO lookup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsList", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsListResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserDocumentsList(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsList", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsListResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserDocumentsListAsync(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsListNoImages", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsListNoImagesResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserDocumentsListNoImages(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsListNoImages", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsListNoImagesResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserDocumentsListNoImagesAsync(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsThumbs", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsThumbsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserDocumentsThumbs(string user, string pass, System.Nullable<int>[] lookupDocumentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsThumbs", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsThumbsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserDocumentsThumbsAsync(string user, string pass, System.Nullable<int>[] lookupDocumentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserDocuments(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds, System.Nullable<bool> thumbsOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserDocumentsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserDocumentsAsync(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds, System.Nullable<bool> thumbsOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetFamilyDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/GetFamilyDocumentsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetFamilyDocuments(string user, string pass, int primaryAppUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetFamilyDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/GetFamilyDocumentsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetFamilyDocumentsAsync(string user, string pass, int primaryAppUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/DeleteAppUserDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/DeleteAppUserDocumentResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult DeleteAppUserDocument(string user, string pass, int appUserId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/DeleteAppUserDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/DeleteAppUserDocumentResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> DeleteAppUserDocumentAsync(string user, string pass, int appUserId, string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetInvitationToShareEmailText", ReplyAction="http://tempuri.org/IMyFileItAppService/GetInvitationToShareEmailTextResponse")]
        string GetInvitationToShareEmailText(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetInvitationToShareEmailText", ReplyAction="http://tempuri.org/IMyFileItAppService/GetInvitationToShareEmailTextResponse")]
        System.Threading.Tasks.Task<string> GetInvitationToShareEmailTextAsync(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/SendInvitationEmail", ReplyAction="http://tempuri.org/IMyFileItAppService/SendInvitationEmailResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult SendInvitationEmail(string user, string pass, string emailAddress, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/SendInvitationEmail", ReplyAction="http://tempuri.org/IMyFileItAppService/SendInvitationEmailResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> SendInvitationEmailAsync(string user, string pass, string emailAddress, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetSentEmails", ReplyAction="http://tempuri.org/IMyFileItAppService/GetSentEmailsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetSentEmails(string user, string pass, string toEmailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetSentEmails", ReplyAction="http://tempuri.org/IMyFileItAppService/GetSentEmailsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetSentEmailsAsync(string user, string pass, string toEmailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserTeamEventDocumentsByTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserTeamEventDocumentsByTeamEventRes" +
            "ponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserTeamEventDocumentsByTeamEvent(string user, string pass, int appUserId, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAppUserTeamEventDocumentsByTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAppUserTeamEventDocumentsByTeamEventRes" +
            "ponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserTeamEventDocumentsByTeamEventAsync(string user, string pass, int appUserId, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventDocumentsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventDocuments(string user, string pass, System.Nullable<int> teamEventDocumentId, string nameLookup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventDocumentsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventDocumentsAsync(string user, string pass, System.Nullable<int> teamEventDocumentId, string nameLookup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddTeamEventDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/AddTeamEventDocumentResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddTeamEventDocument(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDocumentDTO teamEventDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddTeamEventDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/AddTeamEventDocumentResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddTeamEventDocumentAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDocumentDTO teamEventDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateTeamEventDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateTeamEventDocumentResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult UpdateTeamEventDocument(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDocumentDTO teamEventDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateTeamEventDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateTeamEventDocumentResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateTeamEventDocumentAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDocumentDTO teamEventDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveTeamEventDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveTeamEventDocumentResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveTeamEventDocument(string user, string pass, int teamEventDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveTeamEventDocument", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveTeamEventDocumentResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveTeamEventDocumentAsync(string user, string pass, int teamEventDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventPlayerRosters", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventPlayerRostersResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventPlayerRosters(string user, string pass, System.Nullable<int> teamEventPlayerRosterId, System.Nullable<int> teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventPlayerRosters", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventPlayerRostersResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventPlayerRostersAsync(string user, string pass, System.Nullable<int> teamEventPlayerRosterId, System.Nullable<int> teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventPlayersWithUploads", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventPlayersWithUploadsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventPlayersWithUploads(string user, string pass, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetTeamEventPlayersWithUploads", ReplyAction="http://tempuri.org/IMyFileItAppService/GetTeamEventPlayersWithUploadsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventPlayersWithUploadsAsync(string user, string pass, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddTeamEventPlayerRoster", ReplyAction="http://tempuri.org/IMyFileItAppService/AddTeamEventPlayerRosterResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddTeamEventPlayerRoster(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO teamEventPlayerRoster);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddTeamEventPlayerRoster", ReplyAction="http://tempuri.org/IMyFileItAppService/AddTeamEventPlayerRosterResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddTeamEventPlayerRosterAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO teamEventPlayerRoster);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateTeamEventPlayerRoster", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateTeamEventPlayerRosterResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult UpdateTeamEventPlayerRoster(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO teamEventPlayerRoster);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateTeamEventPlayerRoster", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateTeamEventPlayerRosterResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateTeamEventPlayerRosterAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO teamEventPlayerRoster);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveTeamEventPlayerRoster", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveTeamEventPlayerRosterResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveTeamEventPlayerRoster(string user, string pass, int teamEventPlayerRosterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveTeamEventPlayerRoster", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveTeamEventPlayerRosterResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveTeamEventPlayerRosterAsync(string user, string pass, int teamEventPlayerRosterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetSalesReps", ReplyAction="http://tempuri.org/IMyFileItAppService/GetSalesRepsResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetSalesReps(string user, string pass, System.Nullable<int> salesRepId, string nameLookup, System.Nullable<int> salesRepStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetSalesReps", ReplyAction="http://tempuri.org/IMyFileItAppService/GetSalesRepsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetSalesRepsAsync(string user, string pass, System.Nullable<int> salesRepId, string nameLookup, System.Nullable<int> salesRepStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/LoginSalesRep", ReplyAction="http://tempuri.org/IMyFileItAppService/LoginSalesRepResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult LoginSalesRep(string user, string pass, string emailAddress, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/LoginSalesRep", ReplyAction="http://tempuri.org/IMyFileItAppService/LoginSalesRepResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> LoginSalesRepAsync(string user, string pass, string emailAddress, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddSalesRep", ReplyAction="http://tempuri.org/IMyFileItAppService/AddSalesRepResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddSalesRep(string user, string pass, MyFileItTestSite.MyFileIt.SalesRepDTO salesRep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddSalesRep", ReplyAction="http://tempuri.org/IMyFileItAppService/AddSalesRepResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddSalesRepAsync(string user, string pass, MyFileItTestSite.MyFileIt.SalesRepDTO salesRep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateSalesRep", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateSalesRepResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult UpdateSalesRep(string user, string pass, MyFileItTestSite.MyFileIt.SalesRepDTO salesRep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateSalesRep", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateSalesRepResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateSalesRepAsync(string user, string pass, MyFileItTestSite.MyFileIt.SalesRepDTO salesRep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/ChangeSalesRepStatus", ReplyAction="http://tempuri.org/IMyFileItAppService/ChangeSalesRepStatusResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult ChangeSalesRepStatus(string user, string pass, int salesRepId, int salesRepStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/ChangeSalesRepStatus", ReplyAction="http://tempuri.org/IMyFileItAppService/ChangeSalesRepStatusResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> ChangeSalesRepStatusAsync(string user, string pass, int salesRepId, int salesRepStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveSalesRep", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveSalesRepResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveSalesRep(string user, string pass, int salesRepId, int salesRepIdReplacement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveSalesRep", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveSalesRepResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveSalesRepAsync(string user, string pass, int salesRepId, int salesRepIdReplacement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCoaches", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCoachesResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetCoaches(string user, string pass, System.Nullable<int> coachId, string nameLookup, System.Nullable<int> appUserId, System.Nullable<int> organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCoaches", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCoachesResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetCoachesAsync(string user, string pass, System.Nullable<int> coachId, string nameLookup, System.Nullable<int> appUserId, System.Nullable<int> organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCoachesByOrganizationId", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCoachesByOrganizationIdResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetCoachesByOrganizationId(string user, string pass, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCoachesByOrganizationId", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCoachesByOrganizationIdResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetCoachesByOrganizationIdAsync(string user, string pass, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCoachesByTeamEventId", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCoachesByTeamEventIdResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetCoachesByTeamEventId(string user, string pass, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCoachesByTeamEventId", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCoachesByTeamEventIdResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetCoachesByTeamEventIdAsync(string user, string pass, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddCoach", ReplyAction="http://tempuri.org/IMyFileItAppService/AddCoachResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddCoach(string user, string pass, int appUserId, int organizationId, System.DateTime startDate, System.DateTime expiresDate, System.Nullable<int> yearCode, int sportTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddCoach", ReplyAction="http://tempuri.org/IMyFileItAppService/AddCoachResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddCoachAsync(string user, string pass, int appUserId, int organizationId, System.DateTime startDate, System.DateTime expiresDate, System.Nullable<int> yearCode, int sportTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/SendAddCoachEmail", ReplyAction="http://tempuri.org/IMyFileItAppService/SendAddCoachEmailResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult SendAddCoachEmail(string user, string pass, string emailAddress, string subject, string bodyMessage, string[] ccEmailAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/SendAddCoachEmail", ReplyAction="http://tempuri.org/IMyFileItAppService/SendAddCoachEmailResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> SendAddCoachEmailAsync(string user, string pass, string emailAddress, string subject, string bodyMessage, string[] ccEmailAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveCoach", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveCoachResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveCoach(string user, string pass, int appUserId, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveCoach", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveCoachResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveCoachAsync(string user, string pass, int appUserId, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateCoachToTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateCoachToTeamEventResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AssociateCoachToTeamEvent(string user, string pass, MyFileItTestSite.MyFileIt.CoachDTO coach);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateCoachToTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateCoachToTeamEventResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateCoachToTeamEventAsync(string user, string pass, MyFileItTestSite.MyFileIt.CoachDTO coach);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveCoachFromTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveCoachFromTeamEventResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveCoachFromTeamEvent(string user, string pass, int appUserId, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveCoachFromTeamEvent", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveCoachFromTeamEventResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveCoachFromTeamEventAsync(string user, string pass, int appUserId, int teamEventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveCoachFromCurrentAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveCoachFromCurrentAppUserResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult RemoveCoachFromCurrentAppUser(string user, string pass, int coachId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/RemoveCoachFromCurrentAppUser", ReplyAction="http://tempuri.org/IMyFileItAppService/RemoveCoachFromCurrentAppUserResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveCoachFromCurrentAppUserAsync(string user, string pass, int coachId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddShareKey", ReplyAction="http://tempuri.org/IMyFileItAppService/AddShareKeyResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddShareKey(string user, string pass, int primaryAppUserId, System.DateTime purchaseDate, string promoCode, string last4Digits, decimal amount, int salesRepId, int numKeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddShareKey", ReplyAction="http://tempuri.org/IMyFileItAppService/AddShareKeyResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddShareKeyAsync(string user, string pass, int primaryAppUserId, System.DateTime purchaseDate, string promoCode, string last4Digits, decimal amount, int salesRepId, int numKeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateShareKey", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateShareKeyResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult UpdateShareKey(string user, string pass, MyFileItTestSite.MyFileIt.ShareKeyDTO shareKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UpdateShareKey", ReplyAction="http://tempuri.org/IMyFileItAppService/UpdateShareKeyResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateShareKeyAsync(string user, string pass, MyFileItTestSite.MyFileIt.ShareKeyDTO shareKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateShareKeyToUser", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateShareKeyToUserResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AssociateShareKeyToUser(string user, string pass, int appUserId, int shareKeyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AssociateShareKeyToUser", ReplyAction="http://tempuri.org/IMyFileItAppService/AssociateShareKeyToUserResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateShareKeyToUserAsync(string user, string pass, int appUserId, int shareKeyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetShareKeys", ReplyAction="http://tempuri.org/IMyFileItAppService/GetShareKeysResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetShareKeys(string user, string pass, int primaryAppUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetShareKeys", ReplyAction="http://tempuri.org/IMyFileItAppService/GetShareKeysResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetShareKeysAsync(string user, string pass, int primaryAppUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAvailableShareKeysByPromoCodeAndPrimary" +
            "User", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAvailableShareKeysByPromoCodeAndPrimary" +
            "UserResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetAvailableShareKeysByPromoCodeAndPrimaryUser(string user, string pass, int primaryAppUserId, string promocode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetAvailableShareKeysByPromoCodeAndPrimary" +
            "User", ReplyAction="http://tempuri.org/IMyFileItAppService/GetAvailableShareKeysByPromoCodeAndPrimary" +
            "UserResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAvailableShareKeysByPromoCodeAndPrimaryUserAsync(string user, string pass, int primaryAppUserId, string promocode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddPaymentHistory", ReplyAction="http://tempuri.org/IMyFileItAppService/AddPaymentHistoryResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult AddPaymentHistory(string user, string pass, MyFileItTestSite.MyFileIt.PaymentHistoryDTO coach);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/AddPaymentHistory", ReplyAction="http://tempuri.org/IMyFileItAppService/AddPaymentHistoryResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddPaymentHistoryAsync(string user, string pass, MyFileItTestSite.MyFileIt.PaymentHistoryDTO coach);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetPaymentHistory", ReplyAction="http://tempuri.org/IMyFileItAppService/GetPaymentHistoryResponse")]
        MyFileItTestSite.MyFileIt.MyFileItResult GetPaymentHistory(string user, string pass, int primaryAppUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetPaymentHistory", ReplyAction="http://tempuri.org/IMyFileItAppService/GetPaymentHistoryResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetPaymentHistoryAsync(string user, string pass, int primaryAppUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/Authenticate", ReplyAction="http://tempuri.org/IMyFileItAppService/AuthenticateResponse")]
        MyFileItTestSite.MyFileIt.FileItResponse Authenticate(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/Authenticate", ReplyAction="http://tempuri.org/IMyFileItAppService/AuthenticateResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileItResponse> AuthenticateAsync(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCabinets", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCabinetsResponse")]
        System.Collections.Generic.Dictionary<string, string> GetCabinets(string user, string pass, string targetuser, bool allavailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCabinets", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCabinetsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetCabinetsAsync(string user, string pass, string targetuser, bool allavailable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCabinet", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCabinetResponse")]
        MyFileItTestSite.MyFileIt.FileItCabinet GetCabinet(string user, string pass, string cabinetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetCabinet", ReplyAction="http://tempuri.org/IMyFileItAppService/GetCabinetResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileItCabinet> GetCabinetAsync(string user, string pass, string cabinetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/GetDocumentsResponse")]
        MyFileItTestSite.MyFileIt.FileItResponse GetDocuments(string user, string pass, string cabinetid, MyFileItTestSite.MyFileIt.FileItDocumentLookup[] lookups, bool includeThumbs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/GetDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/GetDocumentsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileItResponse> GetDocumentsAsync(string user, string pass, string cabinetid, MyFileItTestSite.MyFileIt.FileItDocumentLookup[] lookups, bool includeThumbs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UploadDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/UploadDocumentsResponse")]
        MyFileItTestSite.MyFileIt.FileItResponse UploadDocuments(string user, string pass, string cabinetId, MyFileItTestSite.MyFileIt.FileItDocument[] documents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyFileItAppService/UploadDocuments", ReplyAction="http://tempuri.org/IMyFileItAppService/UploadDocumentsResponse")]
        System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileItResponse> UploadDocumentsAsync(string user, string pass, string cabinetId, MyFileItTestSite.MyFileIt.FileItDocument[] documents);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyFileItAppServiceChannel : MyFileItTestSite.MyFileIt.IMyFileItAppService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyFileItAppServiceClient : System.ServiceModel.ClientBase<MyFileItTestSite.MyFileIt.IMyFileItAppService>, MyFileItTestSite.MyFileIt.IMyFileItAppService {
        
        public MyFileItAppServiceClient() {
        }
        
        public MyFileItAppServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyFileItAppServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyFileItAppServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyFileItAppServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InitService() {
            return base.Channel.InitService();
        }
        
        public System.Threading.Tasks.Task<bool> InitServiceAsync() {
            return base.Channel.InitServiceAsync();
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetReferenceData(string user, string pass, string referenceTableName) {
            return base.Channel.GetReferenceData(user, pass, referenceTableName);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetReferenceDataAsync(string user, string pass, string referenceTableName) {
            return base.Channel.GetReferenceDataAsync(user, pass, referenceTableName);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserOrganizations(string user, string pass, int appUserId) {
            return base.Channel.GetAppUserOrganizations(user, pass, appUserId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserOrganizationsAsync(string user, string pass, int appUserId) {
            return base.Channel.GetAppUserOrganizationsAsync(user, pass, appUserId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetOrganizations(string user, string pass, System.Nullable<int> organizationId, string nameLookup) {
            return base.Channel.GetOrganizations(user, pass, organizationId, nameLookup);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetOrganizationsAsync(string user, string pass, System.Nullable<int> organizationId, string nameLookup) {
            return base.Channel.GetOrganizationsAsync(user, pass, organizationId, nameLookup);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddOrganization(string user, string pass, MyFileItTestSite.MyFileIt.OrganizationDTO organization) {
            return base.Channel.AddOrganization(user, pass, organization);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddOrganizationAsync(string user, string pass, MyFileItTestSite.MyFileIt.OrganizationDTO organization) {
            return base.Channel.AddOrganizationAsync(user, pass, organization);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult UpdateOrganization(string user, string pass, MyFileItTestSite.MyFileIt.OrganizationDTO organization) {
            return base.Channel.UpdateOrganization(user, pass, organization);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateOrganizationAsync(string user, string pass, MyFileItTestSite.MyFileIt.OrganizationDTO organization) {
            return base.Channel.UpdateOrganizationAsync(user, pass, organization);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveOrganization(string user, string pass, int organizationId) {
            return base.Channel.RemoveOrganization(user, pass, organizationId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveOrganizationAsync(string user, string pass, int organizationId) {
            return base.Channel.RemoveOrganizationAsync(user, pass, organizationId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult UploadFileCabinetDocument(string user, string pass, int appUserId, string filename, string base64Image, MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO doc) {
            return base.Channel.UploadFileCabinetDocument(user, pass, appUserId, filename, base64Image, doc);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UploadFileCabinetDocumentAsync(string user, string pass, int appUserId, string filename, string base64Image, MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO doc) {
            return base.Channel.UploadFileCabinetDocumentAsync(user, pass, appUserId, filename, base64Image, doc);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult VerifyDocument(string user, string pass, int documentId, int verifyAppUserId, int teamEventDocumentId) {
            return base.Channel.VerifyDocument(user, pass, documentId, verifyAppUserId, teamEventDocumentId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> VerifyDocumentAsync(string user, string pass, int documentId, int verifyAppUserId, int teamEventDocumentId) {
            return base.Channel.VerifyDocumentAsync(user, pass, documentId, verifyAppUserId, teamEventDocumentId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddEmergencyShare(string user, string pass, int appUserId, int[] fileCabinetDocumentIds, string emergencyEmailAddress, string emailMessage) {
            return base.Channel.AddEmergencyShare(user, pass, appUserId, fileCabinetDocumentIds, emergencyEmailAddress, emailMessage);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddEmergencyShareAsync(string user, string pass, int appUserId, int[] fileCabinetDocumentIds, string emergencyEmailAddress, string emailMessage) {
            return base.Channel.AddEmergencyShareAsync(user, pass, appUserId, fileCabinetDocumentIds, emergencyEmailAddress, emailMessage);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AssociateDocumentsToTeamEventDocuments(string user, string pass, MyFileItTestSite.MyFileIt.AssociateDocumentDTO[] associations) {
            return base.Channel.AssociateDocumentsToTeamEventDocuments(user, pass, associations);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateDocumentsToTeamEventDocumentsAsync(string user, string pass, MyFileItTestSite.MyFileIt.AssociateDocumentDTO[] associations) {
            return base.Channel.AssociateDocumentsToTeamEventDocumentsAsync(user, pass, associations);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult ResendAssociatedDocuments(string user, string pass, int appUserId, System.Nullable<int> teamEventId) {
            return base.Channel.ResendAssociatedDocuments(user, pass, appUserId, teamEventId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> ResendAssociatedDocumentsAsync(string user, string pass, int appUserId, System.Nullable<int> teamEventId) {
            return base.Channel.ResendAssociatedDocumentsAsync(user, pass, appUserId, teamEventId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AssociateDocumentToTeamEventDocument(string user, string pass, int appUserId, int organizationId, int fileCabinetDocumentId, int teamEventDocumentId, string comment, bool emergency, bool remove) {
            return base.Channel.AssociateDocumentToTeamEventDocument(user, pass, appUserId, organizationId, fileCabinetDocumentId, teamEventDocumentId, comment, emergency, remove);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateDocumentToTeamEventDocumentAsync(string user, string pass, int appUserId, int organizationId, int fileCabinetDocumentId, int teamEventDocumentId, string comment, bool emergency, bool remove) {
            return base.Channel.AssociateDocumentToTeamEventDocumentAsync(user, pass, appUserId, organizationId, fileCabinetDocumentId, teamEventDocumentId, comment, emergency, remove);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RejectTeamEventDocumentShare(string user, string pass, int appUserId, int teamEventDocumentId) {
            return base.Channel.RejectTeamEventDocumentShare(user, pass, appUserId, teamEventDocumentId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RejectTeamEventDocumentShareAsync(string user, string pass, int appUserId, int teamEventDocumentId) {
            return base.Channel.RejectTeamEventDocumentShareAsync(user, pass, appUserId, teamEventDocumentId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventsByAppUser(string user, string pass, int appUserId, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string name) {
            return base.Channel.GetTeamEventsByAppUser(user, pass, appUserId, organizationId, teamEventId, name);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventsByAppUserAsync(string user, string pass, int appUserId, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string name) {
            return base.Channel.GetTeamEventsByAppUserAsync(user, pass, appUserId, organizationId, teamEventId, name);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventsByCoach(string user, string pass, int appUserId, string name) {
            return base.Channel.GetTeamEventsByCoach(user, pass, appUserId, name);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventsByCoachAsync(string user, string pass, int appUserId, string name) {
            return base.Channel.GetTeamEventsByCoachAsync(user, pass, appUserId, name);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEvents(string user, string pass, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string name) {
            return base.Channel.GetTeamEvents(user, pass, organizationId, teamEventId, name);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventsAsync(string user, string pass, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string name) {
            return base.Channel.GetTeamEventsAsync(user, pass, organizationId, teamEventId, name);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult ValidateTeamEvent(string user, string pass, string teamEventName) {
            return base.Channel.ValidateTeamEvent(user, pass, teamEventName);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> ValidateTeamEventAsync(string user, string pass, string teamEventName) {
            return base.Channel.ValidateTeamEventAsync(user, pass, teamEventName);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddTeamEvent(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDTO teamEvent) {
            return base.Channel.AddTeamEvent(user, pass, teamEvent);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddTeamEventAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDTO teamEvent) {
            return base.Channel.AddTeamEventAsync(user, pass, teamEvent);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult UpdateTeamEvent(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDTO teamEvent) {
            return base.Channel.UpdateTeamEvent(user, pass, teamEvent);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateTeamEventAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDTO teamEvent) {
            return base.Channel.UpdateTeamEventAsync(user, pass, teamEvent);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveTeamEvent(string user, string pass, int teamEventId) {
            return base.Channel.RemoveTeamEvent(user, pass, teamEventId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveTeamEventAsync(string user, string pass, int teamEventId) {
            return base.Channel.RemoveTeamEventAsync(user, pass, teamEventId);
        }
        
        public bool CheckAppUserExists(string user, string pass, string appUserName) {
            return base.Channel.CheckAppUserExists(user, pass, appUserName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAppUserExistsAsync(string user, string pass, string appUserName) {
            return base.Channel.CheckAppUserExistsAsync(user, pass, appUserName);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult LoginAppUser(string user, string pass, string appUserName, string appUserPass) {
            return base.Channel.LoginAppUser(user, pass, appUserName, appUserPass);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> LoginAppUserAsync(string user, string pass, string appUserName, string appUserPass) {
            return base.Channel.LoginAppUserAsync(user, pass, appUserName, appUserPass);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult ForgotPassword(string user, string pass, string emailAddress) {
            return base.Channel.ForgotPassword(user, pass, emailAddress);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> ForgotPasswordAsync(string user, string pass, string emailAddress) {
            return base.Channel.ForgotPasswordAsync(user, pass, emailAddress);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUsers(string user, string pass, System.Nullable<int> appUserId, string nameLookup) {
            return base.Channel.GetAppUsers(user, pass, appUserId, nameLookup);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUsersAsync(string user, string pass, System.Nullable<int> appUserId, string nameLookup) {
            return base.Channel.GetAppUsersAsync(user, pass, appUserId, nameLookup);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAllAppUsers(string user, string pass, System.Nullable<int> organizationId) {
            return base.Channel.GetAllAppUsers(user, pass, organizationId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAllAppUsersAsync(string user, string pass, System.Nullable<int> organizationId) {
            return base.Channel.GetAllAppUsersAsync(user, pass, organizationId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUsersByEmail(string user, string pass, string userName, string emailAddress, string userPassword) {
            return base.Channel.GetAppUsersByEmail(user, pass, userName, emailAddress, userPassword);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUsersByEmailAsync(string user, string pass, string userName, string emailAddress, string userPassword) {
            return base.Channel.GetAppUsersByEmailAsync(user, pass, userName, emailAddress, userPassword);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUsersByPhoneNumber(string user, string pass, string phoneNumber) {
            return base.Channel.GetAppUsersByPhoneNumber(user, pass, phoneNumber);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUsersByPhoneNumberAsync(string user, string pass, string phoneNumber) {
            return base.Channel.GetAppUsersByPhoneNumberAsync(user, pass, phoneNumber);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUsersByNameSexEmail(string user, string pass, int appUserId, int teamEventId, string firstName, string lastName, string parentEmailAddress, string sex) {
            return base.Channel.GetAppUsersByNameSexEmail(user, pass, appUserId, teamEventId, firstName, lastName, parentEmailAddress, sex);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUsersByNameSexEmailAsync(string user, string pass, int appUserId, int teamEventId, string firstName, string lastName, string parentEmailAddress, string sex) {
            return base.Channel.GetAppUsersByNameSexEmailAsync(user, pass, appUserId, teamEventId, firstName, lastName, parentEmailAddress, sex);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetCoachMembers(string user, string pass, int appUserId, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string nameLookup, string parentEmailAddress) {
            return base.Channel.GetCoachMembers(user, pass, appUserId, organizationId, teamEventId, nameLookup, parentEmailAddress);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetCoachMembersAsync(string user, string pass, int appUserId, System.Nullable<int> organizationId, System.Nullable<int> teamEventId, string nameLookup, string parentEmailAddress) {
            return base.Channel.GetCoachMembersAsync(user, pass, appUserId, organizationId, teamEventId, nameLookup, parentEmailAddress);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddAppUser(string user, string pass, MyFileItTestSite.MyFileIt.AppUserDTO appUser, System.Nullable<int> autoSignUpOrganizationId) {
            return base.Channel.AddAppUser(user, pass, appUser, autoSignUpOrganizationId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddAppUserAsync(string user, string pass, MyFileItTestSite.MyFileIt.AppUserDTO appUser, System.Nullable<int> autoSignUpOrganizationId) {
            return base.Channel.AddAppUserAsync(user, pass, appUser, autoSignUpOrganizationId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AssociateAppUserToOrganization(string user, string pass, int appUserId, int appUserTypeId, int organizationId, System.DateTime startDate, System.DateTime expiresDate, System.Nullable<int> yearCode, int sportTypeId) {
            return base.Channel.AssociateAppUserToOrganization(user, pass, appUserId, appUserTypeId, organizationId, startDate, expiresDate, yearCode, sportTypeId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateAppUserToOrganizationAsync(string user, string pass, int appUserId, int appUserTypeId, int organizationId, System.DateTime startDate, System.DateTime expiresDate, System.Nullable<int> yearCode, int sportTypeId) {
            return base.Channel.AssociateAppUserToOrganizationAsync(user, pass, appUserId, appUserTypeId, organizationId, startDate, expiresDate, yearCode, sportTypeId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveAppUserFromOrganization(string user, string pass, int appUserId, int organizationId) {
            return base.Channel.RemoveAppUserFromOrganization(user, pass, appUserId, organizationId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveAppUserFromOrganizationAsync(string user, string pass, int appUserId, int organizationId) {
            return base.Channel.RemoveAppUserFromOrganizationAsync(user, pass, appUserId, organizationId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult UpdateAppUser(string user, string pass, MyFileItTestSite.MyFileIt.AppUserDTO appUser) {
            return base.Channel.UpdateAppUser(user, pass, appUser);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateAppUserAsync(string user, string pass, MyFileItTestSite.MyFileIt.AppUserDTO appUser) {
            return base.Channel.UpdateAppUserAsync(user, pass, appUser);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveAppUser(string user, string pass, int appUserId) {
            return base.Channel.RemoveAppUser(user, pass, appUserId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveAppUserAsync(string user, string pass, int appUserId) {
            return base.Channel.RemoveAppUserAsync(user, pass, appUserId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult UpdateAppUserStatus(string user, string pass, int appUserId, int appUserStatusId) {
            return base.Channel.UpdateAppUserStatus(user, pass, appUserId, appUserStatusId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateAppUserStatusAsync(string user, string pass, int appUserId, int appUserStatusId) {
            return base.Channel.UpdateAppUserStatusAsync(user, pass, appUserId, appUserStatusId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetFamilyUsers(string user, string pass, int primaryAppUserId) {
            return base.Channel.GetFamilyUsers(user, pass, primaryAppUserId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetFamilyUsersAsync(string user, string pass, int primaryAppUserId) {
            return base.Channel.GetFamilyUsersAsync(user, pass, primaryAppUserId);
        }
        
        public MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO GetSingleDocument(string user, string pass, MyFileItTestSite.MyFileIt.FileCabinetDocumentSingleDTO lookup) {
            return base.Channel.GetSingleDocument(user, pass, lookup);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileCabinetDocumentDTO> GetSingleDocumentAsync(string user, string pass, MyFileItTestSite.MyFileIt.FileCabinetDocumentSingleDTO lookup) {
            return base.Channel.GetSingleDocumentAsync(user, pass, lookup);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserDocumentsList(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds) {
            return base.Channel.GetAppUserDocumentsList(user, pass, appUserId, teamEventId, downloadedDocumentIds);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserDocumentsListAsync(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds) {
            return base.Channel.GetAppUserDocumentsListAsync(user, pass, appUserId, teamEventId, downloadedDocumentIds);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserDocumentsListNoImages(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds) {
            return base.Channel.GetAppUserDocumentsListNoImages(user, pass, appUserId, teamEventId, downloadedDocumentIds);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserDocumentsListNoImagesAsync(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds) {
            return base.Channel.GetAppUserDocumentsListNoImagesAsync(user, pass, appUserId, teamEventId, downloadedDocumentIds);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserDocumentsThumbs(string user, string pass, System.Nullable<int>[] lookupDocumentIds) {
            return base.Channel.GetAppUserDocumentsThumbs(user, pass, lookupDocumentIds);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserDocumentsThumbsAsync(string user, string pass, System.Nullable<int>[] lookupDocumentIds) {
            return base.Channel.GetAppUserDocumentsThumbsAsync(user, pass, lookupDocumentIds);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserDocuments(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds, System.Nullable<bool> thumbsOnly) {
            return base.Channel.GetAppUserDocuments(user, pass, appUserId, teamEventId, downloadedDocumentIds, thumbsOnly);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserDocumentsAsync(string user, string pass, int appUserId, System.Nullable<int> teamEventId, System.Nullable<int>[] downloadedDocumentIds, System.Nullable<bool> thumbsOnly) {
            return base.Channel.GetAppUserDocumentsAsync(user, pass, appUserId, teamEventId, downloadedDocumentIds, thumbsOnly);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetFamilyDocuments(string user, string pass, int primaryAppUserId) {
            return base.Channel.GetFamilyDocuments(user, pass, primaryAppUserId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetFamilyDocumentsAsync(string user, string pass, int primaryAppUserId) {
            return base.Channel.GetFamilyDocumentsAsync(user, pass, primaryAppUserId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult DeleteAppUserDocument(string user, string pass, int appUserId, string documentId) {
            return base.Channel.DeleteAppUserDocument(user, pass, appUserId, documentId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> DeleteAppUserDocumentAsync(string user, string pass, int appUserId, string documentId) {
            return base.Channel.DeleteAppUserDocumentAsync(user, pass, appUserId, documentId);
        }
        
        public string GetInvitationToShareEmailText(string user, string pass) {
            return base.Channel.GetInvitationToShareEmailText(user, pass);
        }
        
        public System.Threading.Tasks.Task<string> GetInvitationToShareEmailTextAsync(string user, string pass) {
            return base.Channel.GetInvitationToShareEmailTextAsync(user, pass);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult SendInvitationEmail(string user, string pass, string emailAddress, string message) {
            return base.Channel.SendInvitationEmail(user, pass, emailAddress, message);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> SendInvitationEmailAsync(string user, string pass, string emailAddress, string message) {
            return base.Channel.SendInvitationEmailAsync(user, pass, emailAddress, message);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetSentEmails(string user, string pass, string toEmailAddress) {
            return base.Channel.GetSentEmails(user, pass, toEmailAddress);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetSentEmailsAsync(string user, string pass, string toEmailAddress) {
            return base.Channel.GetSentEmailsAsync(user, pass, toEmailAddress);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAppUserTeamEventDocumentsByTeamEvent(string user, string pass, int appUserId, int teamEventId) {
            return base.Channel.GetAppUserTeamEventDocumentsByTeamEvent(user, pass, appUserId, teamEventId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAppUserTeamEventDocumentsByTeamEventAsync(string user, string pass, int appUserId, int teamEventId) {
            return base.Channel.GetAppUserTeamEventDocumentsByTeamEventAsync(user, pass, appUserId, teamEventId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventDocuments(string user, string pass, System.Nullable<int> teamEventDocumentId, string nameLookup) {
            return base.Channel.GetTeamEventDocuments(user, pass, teamEventDocumentId, nameLookup);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventDocumentsAsync(string user, string pass, System.Nullable<int> teamEventDocumentId, string nameLookup) {
            return base.Channel.GetTeamEventDocumentsAsync(user, pass, teamEventDocumentId, nameLookup);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddTeamEventDocument(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDocumentDTO teamEventDocument) {
            return base.Channel.AddTeamEventDocument(user, pass, teamEventDocument);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddTeamEventDocumentAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDocumentDTO teamEventDocument) {
            return base.Channel.AddTeamEventDocumentAsync(user, pass, teamEventDocument);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult UpdateTeamEventDocument(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDocumentDTO teamEventDocument) {
            return base.Channel.UpdateTeamEventDocument(user, pass, teamEventDocument);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateTeamEventDocumentAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventDocumentDTO teamEventDocument) {
            return base.Channel.UpdateTeamEventDocumentAsync(user, pass, teamEventDocument);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveTeamEventDocument(string user, string pass, int teamEventDocumentId) {
            return base.Channel.RemoveTeamEventDocument(user, pass, teamEventDocumentId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveTeamEventDocumentAsync(string user, string pass, int teamEventDocumentId) {
            return base.Channel.RemoveTeamEventDocumentAsync(user, pass, teamEventDocumentId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventPlayerRosters(string user, string pass, System.Nullable<int> teamEventPlayerRosterId, System.Nullable<int> teamEventId) {
            return base.Channel.GetTeamEventPlayerRosters(user, pass, teamEventPlayerRosterId, teamEventId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventPlayerRostersAsync(string user, string pass, System.Nullable<int> teamEventPlayerRosterId, System.Nullable<int> teamEventId) {
            return base.Channel.GetTeamEventPlayerRostersAsync(user, pass, teamEventPlayerRosterId, teamEventId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetTeamEventPlayersWithUploads(string user, string pass, int teamEventId) {
            return base.Channel.GetTeamEventPlayersWithUploads(user, pass, teamEventId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetTeamEventPlayersWithUploadsAsync(string user, string pass, int teamEventId) {
            return base.Channel.GetTeamEventPlayersWithUploadsAsync(user, pass, teamEventId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddTeamEventPlayerRoster(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO teamEventPlayerRoster) {
            return base.Channel.AddTeamEventPlayerRoster(user, pass, teamEventPlayerRoster);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddTeamEventPlayerRosterAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO teamEventPlayerRoster) {
            return base.Channel.AddTeamEventPlayerRosterAsync(user, pass, teamEventPlayerRoster);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult UpdateTeamEventPlayerRoster(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO teamEventPlayerRoster) {
            return base.Channel.UpdateTeamEventPlayerRoster(user, pass, teamEventPlayerRoster);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateTeamEventPlayerRosterAsync(string user, string pass, MyFileItTestSite.MyFileIt.TeamEventPlayerRosterDTO teamEventPlayerRoster) {
            return base.Channel.UpdateTeamEventPlayerRosterAsync(user, pass, teamEventPlayerRoster);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveTeamEventPlayerRoster(string user, string pass, int teamEventPlayerRosterId) {
            return base.Channel.RemoveTeamEventPlayerRoster(user, pass, teamEventPlayerRosterId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveTeamEventPlayerRosterAsync(string user, string pass, int teamEventPlayerRosterId) {
            return base.Channel.RemoveTeamEventPlayerRosterAsync(user, pass, teamEventPlayerRosterId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetSalesReps(string user, string pass, System.Nullable<int> salesRepId, string nameLookup, System.Nullable<int> salesRepStatusId) {
            return base.Channel.GetSalesReps(user, pass, salesRepId, nameLookup, salesRepStatusId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetSalesRepsAsync(string user, string pass, System.Nullable<int> salesRepId, string nameLookup, System.Nullable<int> salesRepStatusId) {
            return base.Channel.GetSalesRepsAsync(user, pass, salesRepId, nameLookup, salesRepStatusId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult LoginSalesRep(string user, string pass, string emailAddress, string password) {
            return base.Channel.LoginSalesRep(user, pass, emailAddress, password);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> LoginSalesRepAsync(string user, string pass, string emailAddress, string password) {
            return base.Channel.LoginSalesRepAsync(user, pass, emailAddress, password);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddSalesRep(string user, string pass, MyFileItTestSite.MyFileIt.SalesRepDTO salesRep) {
            return base.Channel.AddSalesRep(user, pass, salesRep);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddSalesRepAsync(string user, string pass, MyFileItTestSite.MyFileIt.SalesRepDTO salesRep) {
            return base.Channel.AddSalesRepAsync(user, pass, salesRep);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult UpdateSalesRep(string user, string pass, MyFileItTestSite.MyFileIt.SalesRepDTO salesRep) {
            return base.Channel.UpdateSalesRep(user, pass, salesRep);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateSalesRepAsync(string user, string pass, MyFileItTestSite.MyFileIt.SalesRepDTO salesRep) {
            return base.Channel.UpdateSalesRepAsync(user, pass, salesRep);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult ChangeSalesRepStatus(string user, string pass, int salesRepId, int salesRepStatusId) {
            return base.Channel.ChangeSalesRepStatus(user, pass, salesRepId, salesRepStatusId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> ChangeSalesRepStatusAsync(string user, string pass, int salesRepId, int salesRepStatusId) {
            return base.Channel.ChangeSalesRepStatusAsync(user, pass, salesRepId, salesRepStatusId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveSalesRep(string user, string pass, int salesRepId, int salesRepIdReplacement) {
            return base.Channel.RemoveSalesRep(user, pass, salesRepId, salesRepIdReplacement);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveSalesRepAsync(string user, string pass, int salesRepId, int salesRepIdReplacement) {
            return base.Channel.RemoveSalesRepAsync(user, pass, salesRepId, salesRepIdReplacement);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetCoaches(string user, string pass, System.Nullable<int> coachId, string nameLookup, System.Nullable<int> appUserId, System.Nullable<int> organizationId) {
            return base.Channel.GetCoaches(user, pass, coachId, nameLookup, appUserId, organizationId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetCoachesAsync(string user, string pass, System.Nullable<int> coachId, string nameLookup, System.Nullable<int> appUserId, System.Nullable<int> organizationId) {
            return base.Channel.GetCoachesAsync(user, pass, coachId, nameLookup, appUserId, organizationId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetCoachesByOrganizationId(string user, string pass, int organizationId) {
            return base.Channel.GetCoachesByOrganizationId(user, pass, organizationId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetCoachesByOrganizationIdAsync(string user, string pass, int organizationId) {
            return base.Channel.GetCoachesByOrganizationIdAsync(user, pass, organizationId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetCoachesByTeamEventId(string user, string pass, int teamEventId) {
            return base.Channel.GetCoachesByTeamEventId(user, pass, teamEventId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetCoachesByTeamEventIdAsync(string user, string pass, int teamEventId) {
            return base.Channel.GetCoachesByTeamEventIdAsync(user, pass, teamEventId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddCoach(string user, string pass, int appUserId, int organizationId, System.DateTime startDate, System.DateTime expiresDate, System.Nullable<int> yearCode, int sportTypeId) {
            return base.Channel.AddCoach(user, pass, appUserId, organizationId, startDate, expiresDate, yearCode, sportTypeId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddCoachAsync(string user, string pass, int appUserId, int organizationId, System.DateTime startDate, System.DateTime expiresDate, System.Nullable<int> yearCode, int sportTypeId) {
            return base.Channel.AddCoachAsync(user, pass, appUserId, organizationId, startDate, expiresDate, yearCode, sportTypeId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult SendAddCoachEmail(string user, string pass, string emailAddress, string subject, string bodyMessage, string[] ccEmailAddresses) {
            return base.Channel.SendAddCoachEmail(user, pass, emailAddress, subject, bodyMessage, ccEmailAddresses);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> SendAddCoachEmailAsync(string user, string pass, string emailAddress, string subject, string bodyMessage, string[] ccEmailAddresses) {
            return base.Channel.SendAddCoachEmailAsync(user, pass, emailAddress, subject, bodyMessage, ccEmailAddresses);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveCoach(string user, string pass, int appUserId, int organizationId) {
            return base.Channel.RemoveCoach(user, pass, appUserId, organizationId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveCoachAsync(string user, string pass, int appUserId, int organizationId) {
            return base.Channel.RemoveCoachAsync(user, pass, appUserId, organizationId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AssociateCoachToTeamEvent(string user, string pass, MyFileItTestSite.MyFileIt.CoachDTO coach) {
            return base.Channel.AssociateCoachToTeamEvent(user, pass, coach);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateCoachToTeamEventAsync(string user, string pass, MyFileItTestSite.MyFileIt.CoachDTO coach) {
            return base.Channel.AssociateCoachToTeamEventAsync(user, pass, coach);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveCoachFromTeamEvent(string user, string pass, int appUserId, int teamEventId) {
            return base.Channel.RemoveCoachFromTeamEvent(user, pass, appUserId, teamEventId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveCoachFromTeamEventAsync(string user, string pass, int appUserId, int teamEventId) {
            return base.Channel.RemoveCoachFromTeamEventAsync(user, pass, appUserId, teamEventId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult RemoveCoachFromCurrentAppUser(string user, string pass, int coachId) {
            return base.Channel.RemoveCoachFromCurrentAppUser(user, pass, coachId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> RemoveCoachFromCurrentAppUserAsync(string user, string pass, int coachId) {
            return base.Channel.RemoveCoachFromCurrentAppUserAsync(user, pass, coachId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddShareKey(string user, string pass, int primaryAppUserId, System.DateTime purchaseDate, string promoCode, string last4Digits, decimal amount, int salesRepId, int numKeys) {
            return base.Channel.AddShareKey(user, pass, primaryAppUserId, purchaseDate, promoCode, last4Digits, amount, salesRepId, numKeys);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddShareKeyAsync(string user, string pass, int primaryAppUserId, System.DateTime purchaseDate, string promoCode, string last4Digits, decimal amount, int salesRepId, int numKeys) {
            return base.Channel.AddShareKeyAsync(user, pass, primaryAppUserId, purchaseDate, promoCode, last4Digits, amount, salesRepId, numKeys);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult UpdateShareKey(string user, string pass, MyFileItTestSite.MyFileIt.ShareKeyDTO shareKey) {
            return base.Channel.UpdateShareKey(user, pass, shareKey);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> UpdateShareKeyAsync(string user, string pass, MyFileItTestSite.MyFileIt.ShareKeyDTO shareKey) {
            return base.Channel.UpdateShareKeyAsync(user, pass, shareKey);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AssociateShareKeyToUser(string user, string pass, int appUserId, int shareKeyId) {
            return base.Channel.AssociateShareKeyToUser(user, pass, appUserId, shareKeyId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AssociateShareKeyToUserAsync(string user, string pass, int appUserId, int shareKeyId) {
            return base.Channel.AssociateShareKeyToUserAsync(user, pass, appUserId, shareKeyId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetShareKeys(string user, string pass, int primaryAppUserId) {
            return base.Channel.GetShareKeys(user, pass, primaryAppUserId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetShareKeysAsync(string user, string pass, int primaryAppUserId) {
            return base.Channel.GetShareKeysAsync(user, pass, primaryAppUserId);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetAvailableShareKeysByPromoCodeAndPrimaryUser(string user, string pass, int primaryAppUserId, string promocode) {
            return base.Channel.GetAvailableShareKeysByPromoCodeAndPrimaryUser(user, pass, primaryAppUserId, promocode);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetAvailableShareKeysByPromoCodeAndPrimaryUserAsync(string user, string pass, int primaryAppUserId, string promocode) {
            return base.Channel.GetAvailableShareKeysByPromoCodeAndPrimaryUserAsync(user, pass, primaryAppUserId, promocode);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult AddPaymentHistory(string user, string pass, MyFileItTestSite.MyFileIt.PaymentHistoryDTO coach) {
            return base.Channel.AddPaymentHistory(user, pass, coach);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> AddPaymentHistoryAsync(string user, string pass, MyFileItTestSite.MyFileIt.PaymentHistoryDTO coach) {
            return base.Channel.AddPaymentHistoryAsync(user, pass, coach);
        }
        
        public MyFileItTestSite.MyFileIt.MyFileItResult GetPaymentHistory(string user, string pass, int primaryAppUserId) {
            return base.Channel.GetPaymentHistory(user, pass, primaryAppUserId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.MyFileItResult> GetPaymentHistoryAsync(string user, string pass, int primaryAppUserId) {
            return base.Channel.GetPaymentHistoryAsync(user, pass, primaryAppUserId);
        }
        
        public MyFileItTestSite.MyFileIt.FileItResponse Authenticate(string user, string pass) {
            return base.Channel.Authenticate(user, pass);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileItResponse> AuthenticateAsync(string user, string pass) {
            return base.Channel.AuthenticateAsync(user, pass);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetCabinets(string user, string pass, string targetuser, bool allavailable) {
            return base.Channel.GetCabinets(user, pass, targetuser, allavailable);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetCabinetsAsync(string user, string pass, string targetuser, bool allavailable) {
            return base.Channel.GetCabinetsAsync(user, pass, targetuser, allavailable);
        }
        
        public MyFileItTestSite.MyFileIt.FileItCabinet GetCabinet(string user, string pass, string cabinetId) {
            return base.Channel.GetCabinet(user, pass, cabinetId);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileItCabinet> GetCabinetAsync(string user, string pass, string cabinetId) {
            return base.Channel.GetCabinetAsync(user, pass, cabinetId);
        }
        
        public MyFileItTestSite.MyFileIt.FileItResponse GetDocuments(string user, string pass, string cabinetid, MyFileItTestSite.MyFileIt.FileItDocumentLookup[] lookups, bool includeThumbs) {
            return base.Channel.GetDocuments(user, pass, cabinetid, lookups, includeThumbs);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileItResponse> GetDocumentsAsync(string user, string pass, string cabinetid, MyFileItTestSite.MyFileIt.FileItDocumentLookup[] lookups, bool includeThumbs) {
            return base.Channel.GetDocumentsAsync(user, pass, cabinetid, lookups, includeThumbs);
        }
        
        public MyFileItTestSite.MyFileIt.FileItResponse UploadDocuments(string user, string pass, string cabinetId, MyFileItTestSite.MyFileIt.FileItDocument[] documents) {
            return base.Channel.UploadDocuments(user, pass, cabinetId, documents);
        }
        
        public System.Threading.Tasks.Task<MyFileItTestSite.MyFileIt.FileItResponse> UploadDocumentsAsync(string user, string pass, string cabinetId, MyFileItTestSite.MyFileIt.FileItDocument[] documents) {
            return base.Channel.UploadDocumentsAsync(user, pass, cabinetId, documents);
        }
    }
}
